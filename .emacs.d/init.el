;;; init.el --- My Emacs initialization -*- lexical-binding: t -*-

;;; Commentary:

;; Emacs Startup File --- initialization for Emacs
;; Do not edit this file directly!
;; This file is automathically generated by ~org-bable-tangle~ on Emacs.org

;;; Code:

;; Better garbage collection threshold
(setq gc-cons-threshold (* 50 1000 1000))
;; GnuPG keyring path correction
(setq package-gnupghome-dir "~/.emacs.d/elpa/gnupg")
;; Start server only if not in terminal
(when (or (eq system-type 'windows-nt)
        (eq system-type 'gnu/linux))
(server-start))

;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("nongnu" . "https://elpa.nongnu.org/nongnu/")
                         ;("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)

;;Custom function definitions:
(defun pmdn/append-to-path (path)
  "Add a path both to the $PATH variable and to Emacs' ~exec-path~."
  (setenv "PATH" (concat (getenv "PATH") ":" path))
  (add-to-list 'exec-path path))

(defun pmdn/set-margins ()
  "Set margins in current buffer."
  (setq left-margin-width 3)
  (setq right-margin-width 3))

(defun pmdn/org-mode-setup ()
  "Set basic org mode configuration hooks."
  (org-indent-mode 0)
  (variable-pitch-mode 1)
  (visual-line-mode 1))

(defun pmdn/org-babel-tangle-config ()
  "Activate tangle only if buffer is Emacs.org config file."
  (when (or (string-equal (buffer-file-name)
                      (expand-file-name "~/.emacs.d/Emacs.org"))
            (string-equal (buffer-file-name)
                      (expand-file-name "~/.dotfiles/.emacs.d/Emacs.org")))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(defun pmdn/denote-random-note (&optional directory)
  "Open a random denote."
  (interactive)
  (let* ((denote-directory (or directory denote-directory))
         (files (denote-directory-files)))
    (find-file (nth (random (length files)) files))))

(defun pmdn/org-inline-css-hook (exporter)
  "Insert custom inline css to automatically set the background of code to whatever theme I'm using's background. Also embed css into html file."
  (when (eq exporter 'html)
    (let* ((my-pre-bg (face-background 'default))
           (my-pre-fg (face-foreground 'default))
           (dir (ignore-errors (file-name-directory (buffer-file-name))))
           (path (concat dir "style.css"))
           (homestyle (or (null dir) (null (file-exists-p path))))
           (final (if homestyle (concat org-directory "/src/readtheorg_theme/css/readtheorg.css") path)))
      (setq
       org-html-head-extra
       (concat
        org-html-head-extra
        (format "<style type=\"text/css\">\n pre.src {background-color: %s; color: %s;}</style>\n"
                my-pre-bg my-pre-fg)))
      (setq org-html-head-include-default-style nil)
      (setq org-html-head (concat
                         "<style type=\"text/css\">\n"
                         "<!--/*--><![CDATA[/*><!--*/\n"
                         (with-temp-buffer
                           (insert-file-contents final)
                           (buffer-string))
                         "/*]]>*/-->\n"
                         "</style>\n")))))

(defun pmdn/remove-non-sentence-breaks (begin end)
  "Remove line breaks in the region unless preceded by a period.
When called interactively, operates on the selected region.
BEGIN and END specify the region boundaries."
  (interactive "r")
  (save-excursion
    (save-restriction
      (narrow-to-region begin end)
      (goto-char (point-min))
      ;; Continue while we can find a newline
      (while (re-search-forward "\n" nil t)
        (save-excursion
          ;; Check character before newline
          (backward-char)
          (unless (looking-back "\\." (- (point) 1))
            ;; If not preceded by period, replace newline with space
            (replace-match " ")))))))

(defcustom pmdn/tmp-buffer-mode-alist
  '((?o . org-mode)
    (?t . text-mode)
    (?m . markdown-mode)
    (?l . lisp-interaction-mode))
  "List of major modes for temporary buffers and their hotkeys."
  :type '(alist :key-type character :value-type symbol))

(defun pmdn/tmp-buffer-completion-table ()
  "Create completion table for temporary buffer modes."
  (mapcar (lambda (item)
            (cons (format "%c: %s" (car item) (cdr item))
                  (car item)))
          pmdn/tmp-buffer-mode-alist))

(defun pmdn/tmp-buffer ()
  "Open temporary buffer in specified major mode."
  (interactive)
  (let* ((completion-table (pmdn/tmp-buffer-completion-table))
         (choice (completing-read "Select mode: " completion-table nil t))
         (mode-char (cdr (assoc choice completion-table)))
         (buf (generate-new-buffer "*tmp*")))
    (with-current-buffer buf
      (funcall (cdr (assoc mode-char pmdn/tmp-buffer-mode-alist))))
    (pop-to-buffer buf)))

(defun pmdn/reload-emacs-configuration ()
  "Reload the 'init.el' configuration file."
  (interactive)
  (load-file "~/.emacs.d/init.el"))

(defun pmdn/keyboard-quit-dwim ()
  "Do-What-I-Mean behaviour for a general `keyboard-quit'from Prot.

The generic `keyboard-quit' does not do the expected thing when
the minibuffer is open.  Whereas we want it to close the
minibuffer, even without explicitly focusing it.

The DWIM behaviour of this command is as follows:

- When the region is active, disable it.
- When a minibuffer is open, but not focused, close the minibuffer.
- When the Completions buffer is selected, close it.
- In every other case use the regular `keyboard-quit'."
  (interactive)
  (cond
   ((region-active-p)
    (keyboard-quit))
   ((derived-mode-p 'completion-list-mode)
    (delete-completion-window))
   ((> (minibuffer-depth) 0)
    (abort-recursive-edit))
   (t
    (keyboard-quit))))

(defun pmdn/org-export-output-file-name-modified (orig-fun extension &optional subtreep pub-dir)
  "Set org export directory, even when narrowing (otherwise, '#+EXPORT_FILE_NAME:' would be ok)"
  (unless pub-dir
    (setq pub-dir "exports")
    (unless (file-directory-p pub-dir)
      (make-directory pub-dir)))
  (apply orig-fun extension subtreep pub-dir nil))
(advice-add 'org-export-output-file-name :around #'pmdn/org-export-output-file-name-modified)

;; UTF-8 everywhere
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)

;; User interface
(menu-bar-mode -1)          ; Disable the menu bar
(scroll-bar-mode -1)        ; Disable visible scrollbar
(tool-bar-mode -1)          ; Disable the toolbar
(tooltip-mode -1)           ; Disable tooltips
;; (set-fringe-mode 10)        ; Give some breathing room. Not needed with spacious-padding

;; GIve some air in text mode by increasing margins
;;(add-hook 'text-mode-hook 'pmdn/set-margins)

;; Set up the visible bell
(setq visible-bell t)

;; Calendar setting
(setq calendar-date-style 'iso)
(setq calendar-month-name-array
      ["Enero" "Febrero" "Marzo" "Abril" "Mayo" "Junio"
       "Julio"    "Agosto"   "Septiembre" "Octubre" "Noviembre" "Diciembre"])
    
(setq calendar-day-name-array
      ["Domingo" "Lunes" "Martes" "Miércoles" "Jueves" "Viernes" "Sábado"])
(setq calendar-week-start-day 1)
(setq calendar-holidays '((holiday-fixed 1 1 "Año Nuevo")
                          (holiday-fixed 1 6 "Reyes Magos")
                          (holiday-fixed 4 17 "Jueves Santo")
                          (holiday-fixed 4 18 "Viernes Santo")
                          (holiday-fixed 4 21 "Lunes de Pascua")
                          (holiday-fixed 5 1 "Dia del Trabajo")
                          (holiday-fixed 6 24 "San Juan Bautista")
                          (holiday-fixed 7 25 "Santiago Apóstol")
                          (holiday-fixed 7 31 "San Ignacio de Loyola")
                          (holiday-fixed 8 15 "Asunción")
                          (holiday-fixed 10 12 "Día de la Hispanidad")
                          (holiday-fixed 11 01 "Todos los Santos")
                          (holiday-fixed 12 06 "Constitución")
                          (holiday-fixed 12 25 "Navidad")
                          ))

;; Show column numbers in mode line and line numbers on window
(column-number-mode)
;; (global-display-line-numbers-mode t)
;;
;; ;; Disable line numbers for some modes
;; (dolist (mode '(org-mode-hook
;;                 term-mode-hook
;;                 shell-mode-hook
;;                 treemacs-mode-hook
;;                 eshell-mode-hook
;;                 deft-mode-hook
;;                 org-agenda-mode-hook))
;;   (add-hook mode (lambda () (display-line-numbers-mode 0))))
;; Show line numbers only on prog modes
(add-hook 'prog-mode-hook 'display-line-numbers-mode)  

;; When something changes a file, automatically refresh the buffer containing it.
(global-auto-revert-mode t)

;; Visually indicate matching pairs of parentheses.
(show-paren-mode t)

;; Insert closing parenthesis, bracket... pairs automatically
(electric-pair-mode 1)
(setq electric-pair-preserve-balance nil)

;; y-or-n answers
(fset 'yes-or-no-p 'y-or-n-p)	

;; Set tab width to 4 spaces and Allman indentation (bsd) in C
(setq-default tab-width 4)
(setq-default indent-tabs-mode nil)
(setq indent-line-function 'insert-tab)
(setq c-default-style "bsd"
      c-basic-offset 4)

;; Kill the current buffer when selecting a new directory
(setq dired-kill-when-opening-new-dired-buffer t)

;; tab-bar configuration
(setq tab-bar-show 1)                      ;; hide bar if at least 1 tab open
(setq tab-bar-close-button-show nil)       ;; hide tab close / X button
(setq tab-bar-new-tab-choice "*dashboard*");; buffer to show in new tabs
(setq tab-bar-tab-hints t)                 ;; show tab numbers
(setq tab-bar-separator " ")                ;; separator
(setq tab-bar-format '(tab-bar-format-menu-bar
                       tab-bar-format-tabs
                       tab-bar-separator)) ;; elements to include in bar
(setq tab-bar-select-tab-modifiers '(meta));; fast selection
(setq tab-bar-new-tab-to 'rightmost)       ;; placement of new tab
;;To make ediff to be horizontally split
(setq ediff-split-window-function 'split-window-horizontally)
;;To make ediff operate on selected-frame
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
;;To use project.el in non-versioned files
(setq project-vc-extra-root-markers '(".project"))

(setq user-full-name "Patxi Madina")
(cond ((eq system-type 'windows-nt)
       ;; Windows-specific code goes here.
       (setq user-mail-address "pmadina@mondragon.edu"))
      ((eq system-type 'gnu/linux)
       ;; Linux-specific code goes here.
       (setq user-mail-address "pmdn@mailbox.org")
       ))

;; Custom command stored on its own file
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file 'noerror))
;; Back-up directories
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

;; Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c e") 'pulsar-pulse-line)
(global-set-key (kbd "C-c j") 'pmdn/remove-non-sentence-breaks)
(global-set-key (kbd "C-c C-t") 'pmdn/tmp-buffer)
(global-set-key (kbd "C-g") 'pmdn/keyboard-quit-dwim)

;; modus themes configuration
(use-package modus-themes
  :ensure
  :init
  ;; Add all your customizations prior to loading the themes
  ;; Remove the border
  (setq modus-themes-common-palette-overrides
        '((border-mode-line-active unspecified)
          (border-mode-line-inactive unspecified)
          (fringe unspecified)))
  (setq modus-themes-italic-constructs t
        modus-themes-bold-constructs t
        modus-themes-variable-pitch-ui t
        modus-themes-mixed-fonts t
        modus-themes-headings
        '((0 . (variable-pitch regular 1.2))
          (1 . (variable-pitch regular 1.2))
          (2 . (variable-pitch regular 1.1))
          (3 . (variable-pitch regular 1.1))
          (4 . (variable-pitch regular 1.1))
          (5 . (variable-pitch regular 1.1)) 
          (6 . (variable-pitch regular 1.1))
          (7 . (variable-pitch regular 1.1)))))

;; ef themes configuration
(use-package ef-themes
  :ensure t
  :config
  (setq ef-themes-variable-pitch-ui t
      ef-themes-mixed-fonts t
      ef-themes-headings
      '((0 . (variable-pitch regular 1.2))
        (1 . (variable-pitch regular 1.2))
        (2 . (variable-pitch regular 1.1))
        (3 . (variable-pitch regular 1.1))
        (4 . (variable-pitch regular 1.1))
        (5 . (variable-pitch regular 1.1)) 
        (6 . (variable-pitch regular 1.1))
        (7 . (variable-pitch regular 1.1))))
  (load-theme 'ef-elea-dark t))

(cond ((eq system-type 'windows-nt)
     ;; Windows-specific code goes here.
     ;; Spacing
     (setq-default line-spacing 0.25)
     ;; Set DejaVu font for the some glyphs
     (set-fontset-font t ?◉ "DejaVu Sans")
     (set-fontset-font t ?▾ "DejaVu Sans")
     )
    ((eq system-type 'gnu/linux)
     ;; Linux-specific code goes here.
     ))

;; Use mono fonts for better alignment
(set-face-attribute 'default nil
                    :font "Fira Mono"
                    :weight 'regular
                    :height 100)

(set-face-attribute 'fixed-pitch nil
                    :font "Fira Mono"
                    :weight 'regular
                    :height 100)

(set-face-attribute 'variable-pitch nil
                    :font "Fira Sans"
                    :weight 'light
                    :height 105)

;; This sets de default font, as 'set-face-attribute' does not seem to work 
(add-to-list 'default-frame-alist '(font . "Fira Mono-10"))

;; All the icons
(use-package all-the-icons
  :ensure t)
;; Nerd icons
(use-package nerd-icons
  :ensure t)

;; Configure Doom Modeline
(use-package doom-modeline
  :hook (after-init . doom-modeline-mode)
  :config (setq mode-line-right-align-edge 'right-fringe)
  :custom ((doom-modeline-buffer-file-name-style 'truncate-except-project)))

;; Diminish minor modes
(use-package diminish
  :ensure t)

;; To show next commands with which-key
(use-package which-key
  :defer 0
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 0.5))

;; Dashboard configuration
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook)
  ; set the title
  (setq dashboard-banner-logo-title "Bienvenido a Emacs!")
  ; set the banner
  (setq dashboard-startup-banner "~/.emacs.d/emacs-splash.png")
  (setq dashboard-projects-backend 'project-el)
  ; display icons on both GUI and terminal
  (setq dashboard-display-icons-p t)
  ; use `nerd-icons' package
  (setq dashboard-icon-type 'nerd-icons)
  (setq dashboard-navigator-buttons
        `(;; line1
          ;; Shortcuts
          ((,(nerd-icons-octicon "nf-oct-mark_github" :height 1.0 :v-adjust 0.0)
            "Github"
            "Github repository"
            (lambda (&rest _) (browse-url "https://github.com/pmdn/dotfiles/tree/master/.emacs.d")))
          (,(nerd-icons-octicon "nf-oct-tools" :height 1.0 :v-adjust 0.0)
            "Config"
            "Configuration file"
            (lambda (&rest _) (find-file (expand-file-name  "~/.emacs.d/Emacs.org"))))
          (,(nerd-icons-octicon "nf-oct-rss" :height 0.9 :v-adjust 0.0)
            "Elfeed"
            "Go to rss feed"
            (lambda (&rest _) (elfeed))))))
  ; set the sections I'd like displayed and how many of each
  (setq dashboard-items '((recents . 7) (projects . 5) (bookmarks . 5) (agenda . 5)))
  (setq dashboard-heading-icons '((recents   . "nf-oct-history")
                              (bookmarks . "nf-oct-bookmark")
                              (agenda    . "nf-oct-calendar")
                              (projects  . "nf-oct-rocket")
                              (registers . "nf-oct-database")))
  (setq dashboard-startupify-list '(dashboard-insert-banner
                                dashboard-insert-newline
                                dashboard-insert-banner-title
                                dashboard-insert-newline
                                dashboard-insert-navigator
                                dashboard-insert-newline
                                dashboard-insert-init-info
                                dashboard-insert-items
                                dashboard-insert-newline
                                dashboard-insert-footer))
  ; center it all
  (setq dashboard-center-content t)
  ; show shortcut keys
  (setq dashboard-show-shortcuts t)
  ; use nice icons for the files
  (setq dashboard-set-file-icons t)
  ; use nice section icons
  (setq dashboard-set-heading-icons t)
  ; disable the snarky footer
  (setq dashboard-set-footer nil))

;; nerd-icons in dired
(use-package nerd-icons-dired
  :hook
  (dired-mode . nerd-icons-dired-mode))

;;Dired-Sidebar configuration
(use-package dired-sidebar
  :bind (("C-c s" . dired-sidebar-toggle-sidebar))
  :ensure t
  :commands (dired-sidebar-toggle-sidebar)
  :config
  ;;(setq dired-sidebar-subtree-line-prefix "__")
  (setq dired-sidebar-theme 'ascii))

;; pulsar configuration 
(use-package pulsar
  :custom
  ;; NOTE: The commented out functions are from before
  ;; the introduction of `pulsar-pulse-on-window-change'.  Try
  ;; that instead.
  (pulsar-pulse-functions ; Read the doc string for why not `setq'
   '(recenter-top-bottom
     move-to-window-line-top-bottom
     reposition-window
     bookmark-jump
     other-window
     delete-window
     delete-other-windows
     forward-page
     backward-page
     scroll-up-command
     scroll-down-command
     windmove-right
     windmove-left
     windmove-up
     windmove-down
     windmove-swap-states-right
     windmove-swap-states-left
     windmove-swap-states-up
     windmove-swap-states-down
     tab-new
     tab-close
     tab-next
     org-next-visible-heading
     org-previous-visible-heading
     org-forward-heading-same-level
     org-backward-heading-same-level
     outline-backward-same-level
     outline-forward-same-level
     outline-next-visible-heading
     outline-previous-visible-heading
     ace-window
     outline-up-heading))
  :config
  (pulsar-global-mode 1)
  (setq pulsar-pulse t)
  (setq pulsar-delay 0.055)
  (setq pulsar-iterations 10)
  (setq pulsar-face 'pulsar-yellow)
  (setq pulsar-highlight-face 'pulsar-yellow))

;; Configure avy
(use-package avy
  :ensure t
  :bind (("C-:" . avy-goto-char)
         ("C-M-:" . avy-goto-char-2)))

;;Breadcrumb configuration
(use-package breadcrumb
  :hook (prog-mode . breadcrumb-local-mode))

;; rainbow-mode configuration 
(use-package rainbow-mode
  :ensure t
  :hook
  (prog-mode . rainbow-mode)
  (text-mode . rainbow-mode))

;; Configure nerd-icons-ibuffer
(use-package nerd-icons-ibuffer
  :ensure t
  :hook (ibuffer-mode . nerd-icons-ibuffer-mode))

;; spacious-padding configuration
(use-package spacious-padding
  :ensure t
  :custom
  (spacious-padding-widths
      '( :internal-border-width 15
         :header-line-width 2
         :mode-line-width 2
         :tab-width 2
         :right-divider-width 30
         :scroll-bar-width 0
         :fringe-width 8))
  :config
  (spacious-padding-mode 1))

;; Configure orderless
(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))

;; Enable vertico
(use-package vertico
  :init
  (vertico-mode)

  ;; Different scroll margin
  ;; (setq vertico-scroll-margin 0)

  ;; Show more candidates
  ;; (setq vertico-count 20)

  ;; Grow and shrink the Vertico minibuffer
  ;; (setq vertico-resize t)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  (setq vertico-cycle t)
  )

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))

;; Configuration for Consult
(use-package consult
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings (mode-specific-map)
         ("C-c h" . consult-history)
         ("C-c m" . consult-mode-command)
         ("C-c k" . consult-kmacro)
         ;; C-x bindings (ctl-x-map)
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("C-c f" . consult-recent-file)
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ("<help> a" . consult-apropos)            ;; orig. apropos-command
         ;; M-g bindings (goto-map)
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings (search-map)
         ("M-s d" . consult-find)
         ("M-s D" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s m" . consult-multi-occur)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode))

;; Enable rich annotations using the Marginalia package
(use-package marginalia
  ;; Either bind `marginalia-cycle' globally or only in the minibuffer
  :bind (("M-A" . marginalia-cycle)
         :map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init configuration is always executed (Not lazy!)
  :init

  ;; Must be in the :init section of use-package such that the mode gets
  ;; enabled right away. Note that this forces loading the package.
  (marginalia-mode))

;; Add icons to completion candidates using the built in completion metadata functions
(use-package nerd-icons-completion
  :after marginalia
  :config
  (nerd-icons-completion-mode)
  :hook
  ('marginalia-mode-hook . 'nerd-icons-completion-marginalia-setup))

;; Embark configuration
(use-package embark
  :ensure t

  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :ensure t
  :after (embark consult)
  :demand t ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))

;; Enable Corfu
(use-package corfu
  ;; Optional customizations
  :custom
  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion
  ;; (corfu-separator ?\s)          ;; Orderless field separator
  ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;; (corfu-preselect-first nil)    ;; Disable candidate preselection
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-echo-documentation nil) ;; Disable documentation in the echo area
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin
  (corfu-min-width 40)           ;; Set a minimun width for the corfu area

  ;; Recommended: Enable Corfu globally.
  ;; This is recommended since Dabbrev can be used globally via  M-/.
  ;; See also `corfu-excluded-modes'.
  :init
  (global-corfu-mode))

;; Add icons to completions in corfu
(use-package nerd-icons-corfu
  :after corfu
  :init (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 3)

  ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
  ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  (setq tab-always-indent 'complete))

;; Add cape extensions
(use-package cape
  ;; Bind dedicated completion commands
  ;; Alternative prefix keys: C-c p, M-p, M-+, ...
  :bind (("C-c p p" . completion-at-point) ;; capf
         ("C-c p t" . complete-tag)        ;; etags
         ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
         ("C-c p h" . cape-history)
         ("C-c p f" . cape-file)
         ("C-c p k" . cape-keyword)
         ("C-c p s" . cape-symbol)
         ("C-c p a" . cape-abbrev)
         ("C-c p i" . cape-ispell)
         ("C-c p l" . cape-line)
         ("C-c p w" . cape-dict)
         ("C-c p \\" . cape-tex)
         ("C-c p _" . cape-tex)
         ("C-c p ^" . cape-tex)
         ("C-c p &" . cape-sgml)
         ("C-c p r" . cape-rfc1345))
  :init
  ;; Add `completion-at-point-functions', used by `completion-at-point'.
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  ;;(add-to-list 'completion-at-point-functions #'cape-history)
  ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
  ;;(add-to-list 'completion-at-point-functions #'cape-tex)
  ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
  ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
  ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
  ;;(add-to-list 'completion-at-point-functions #'cape-ispell)
  ;;(add-to-list 'completion-at-point-functions #'cape-dict)
  ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
  ;;(add-to-list 'completion-at-point-functions #'cape-line)
)

;; Org mode configuration

;; Change font size for headings
(with-eval-after-load 'org-faces
  ;; Increase the size of various headings
  (set-face-attribute 'org-document-title nil :font "Fira Sans" :weight 'bold :height 1.3)
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Fira Sans" :weight 'regular :height (cdr face)))
  ;; Set fixed pitch faces
  (require 'org-indent)
  (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
  (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-date nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-block nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

;; Enable Markdown export
(eval-after-load "org" '(require 'ox-md nil t))

(use-package org
  :pin elpa
  :hook (org-mode . pmdn/org-mode-setup)
  :config
  (setq org-babel-default-header-args
        (cons '(:results . "output verbatim replace")
              (assq-delete-all :results org-babel-default-header-args)))
  (setq org-babel-lisp-eval-fn #'sly-eval)
  (setq org-ellipsis " ▾")
  ;;(setq org-adapt-indentation 'headline-data)
  (setq org-hide-emphasis-markers t)
  ;; Fix image width and show inline images
  (setq org-image-actual-width 700)
  (setq org-startup-with-inline-images t)

  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  (setq org-id-link-to-org-use-id 'use-existing)
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.2))

  (cond ((eq system-type 'windows-nt)
         ;; Windows-specific code goes here.
         (setq org-directory "C:/MGEP Dropbox/patxi madina hernandez/OrgFiles")
         )
        ((eq system-type 'gnu/linux)
         ;; Linux-specific code goes here.
         (setq org-directory "~/Sync/Sincronizadas/Notes/OrgFiles")
         ))
  
  (setq org-agenda-files
        (list
         (concat org-directory "/Notas.org")
         (concat org-directory "/InboxMovil.org")))
  (setq org-archive-location (concat org-directory "/Archivo.org::datetree/"))

  (require 'org-habit)
  (add-to-list 'org-modules 'org-habit)
  (setq org-habit-graph-column 60)

  (setq org-todo-keywords
        '((sequence "TODO(t)" "ACTIVE(a!)" "WAITING(w@/!)" "DELEGATED(d@/!)" "SOMEDAY(s!)" "|" "DONE(D!)" "CANCELLED(C@)")
          (sequence "LEYENDO(y)" "|" "LEÍDO(i)")))

  (setq org-todo-keyword-faces
        '(("TODO".(:foreground "DarkSeaGreen" :weight bold))
          ("ACTIVE".(:foreground "LightSeaGreen" :weight bold))
          ("WAITING".(:foreground "peru" :weight bold))
          ("DELEGATED".(:foreground "CornflowerBlue" :weight bold))
          ("SOMEDAY".(:foreground "dark violet" :weight bold))
          ("DONE".(:foreground "LightGrey" :weight bold))
          ("CANCELLED".(:foreground "IndianRed" :weight bold))
          ("LEYENDO".(:foreground "peru" :weight bold))
          ("LEÍDO".(:foreground "DarkSeaGreen" :weight bold))))

  (setq org-refile-use-outline-path 'file)
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-targets
        '(("Archivo.org" :maxlevel . 1)
          (org-agenda-files :maxlevel . 9)))

  (setq org-log-refile 'note)
  ;; Save Org buffers after refiling!
  (advice-add 'org-refile :after 'org-save-all-org-buffers)

  (setq org-tag-alist
        '((:startgroup)
                                        ; Put mutually exclusive tags here
          (:endgroup)
          ("@errand" . ?E)
          ("@home" . ?H)
          ("@work" . ?W)
          ("agenda" . ?a)
          ("planning" . ?p)
          ("publish" . ?P)
          ("batch" . ?b)
          ("note" . ?n)
          ("idea" . ?i)))

  ;; Configure custom agenda views
  (setq org-tags-match-list-sublevels 'indented)
  (setq org-agenda-custom-commands
        '(("d" "Dashboard"
           ((agenda "" ((org-deadline-warning-days 7)))
            (todo "TODO" ((org-agenda-overriding-header "Todo Tasks")))
            (todo "ACTIVE" ((org-agenda-overriding-header "Active Tasks")))
            (todo "WAITING" ((org-agenda-overriding-header "Waiting Tasks")))
            (todo "DELEGATED" ((org-agenda-overriding-header "Delegated Tasks")))
            (todo "SOMEDAY" ((org-agenda-overriding-header "Someday Tasks")))))

          ("w" "Workflow Status"
           ((todo "TODO"
                  ((org-agenda-overriding-header "Todo")
                   (org-agenda-files org-agenda-files)))
            (todo "ACTIVE"
                  ((org-agenda-overriding-header "Active Tasks")
                   (org-agenda-files org-agenda-files)))
            (todo "WAITING"
                  ((org-agenda-overriding-header "Waiting on External")
                   (org-agenda-files org-agenda-files)))
            (todo "DELEGATED"
                  ((org-agenda-overriding-header "Delegated on External")
                   (org-agenda-files org-agenda-files)))
            (todo "SOMEDAY"
                  ((org-agenda-overriding-header "Maybe do Someday")
                   (org-agenda-files org-agenda-files)))
            (todo "DONE"
                  ((org-agenda-overriding-header "Completed Tasks")
                   (org-agenda-files org-agenda-files)))
            (todo "CANCELLED"
                  ((org-agenda-overriding-header "Cancelled Tasks")
                   (org-agenda-files org-agenda-files)))))

          ("b" "Bookmarks"
           ((tags
             "%bookmark"
             ((org-agenda-overriding-header "Bookmark system")))))
          
          ("r" "Needs Refile"
           ((tags
             "refile"
             ((org-agenda-overriding-header "To refile")
              (org-tags-match-list-sublevels nil)))))))

  ;; Capture templates
  (setq org-default-notes-file (concat org-directory "/Notas.org"))
  (setq org-capture-templates
        `(("f" "Fast Note" entry (file+olp org-default-notes-file "Inbox")
           "* %?\n  %U\n  %i" :empty-lines 1)
          ("t" "Tasks" entry (file+olp org-default-notes-file "Inbox")
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
          ("r" "Reads" entry (file+olp org-default-notes-file "Libros" "Lista Lectura")
           "*** %\\1 %?\n :PROPERTIES:\n :Título: %^{Título}\n :Subtítulo: %^{Subtítulo}\n :Serie: %^{Serie}\n :Autor: %^{Autor [Apellido, Nombre]}\n :Año: %^{Año}\n :Categoría: %^{Categoría}\n :Puntuación: %^{Puntuación [1-5]}\n :Fecha: %^{Fecha Lectura [dd/mm/aaaa]}\n :Estado: %^{Estado|Leído|Leyendo|Pendiente}\n :END: \n" :empty-lines 1 :prepend t)
          ("d" "Dailies" entry (file+datetree org-default-notes-file)
           "* %^{Description} %^g\n Added: %U\n\n %?")
          ("b" "Bookmark (Clipboard)" entry (file+olp org-default-notes-file "Bookmarks")
           "* %(org-cliplink-capture) %^g\n:PROPERTIES:\n:CREATED: %U\n:END:\n\n- %?\n" :empty-lines 1 :prepend t)))
  (add-hook 'org-capture-mode-hook #'org-id-get-create)

  ;; Set global key for capture
  (define-key global-map (kbd "C-c r")
    (lambda () (interactive) (org-capture nil "r")))
  (define-key global-map (kbd "C-c t")
    (lambda () (interactive) (org-capture nil "t")))
  (define-key global-map (kbd "C-c b")
    (lambda () (interactive) (org-capture nil "b")))
  (define-key global-map (kbd "C-c d")
    (lambda () (interactive) (org-capture nil "d"))))

;; Set org bullets
(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

;; org-appear configuration
(use-package org-appear
    :after org
    :hook (org-mode . org-appear-mode))

;; Add org babel languages
(org-babel-do-load-languages
  'org-babel-load-languages
  '((emacs-lisp . t)
    (python . t)
    (lisp . t)
    (scheme . t)
    (shell . t)
    (C .t)))

(push '("conf-unix" . conf-unix) org-src-lang-modes)

;; Org tempo templates
(with-eval-after-load 'org
 ;; This is needed as of Org 9.2
 (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("li" . "src lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("cc" . "src c"))
  ;; For more complicated expansions now ~tempo-define-template must be used. n: newline, p: point after expansion
  (tempo-define-template "org-header"
       '("#+TITLE: " p n
         "#+DESCRITION: " n
         "#+AUTHOR: " n
         "#+SETUPFILE: ./org-html-themes/org/theme-readtheorg-local.setup" n
         "#+SETUPFILE: ./org-latex-themes/jake-latex-standard.setup" n
         "#+TAGS: " n
         "#+STARTUP: overview")
       "<t"
       "Insert an header in the org file"
       'org-tempo-tags)
  (tempo-define-template "org-meeting"
      '("*Asistentes:* " n
        "- " p n n
        "*Notas:* " n
        "- " n n
        "*Tareas:* " n
        n)
      "<m"
      "Insert a meeting template in the org file"
      'org-tempo-tags)
  (tempo-define-template "references"
      '("* References" n
        "#+CITE_EXPORT: csl ~/Zotero/styles/ieee.csl" n
        "#+PRINT_BIBLIOGRAPHY:" n)
      "<r"
      "Insert references header for latex export"
      'org-tempo-tags))

;; Automatically tangle our Emacs.org config file when we save it
(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'pmdn/org-babel-tangle-config)))

;; Configure org-cliplink
(use-package org-cliplink
  :ensure t)

;; org-download configuration
(use-package org-download
  :ensure t
  :custom
    (org-download-method 'directory)
    (org-download-image-dir "images")
    (org-download-heading-lvl nil)
    (org-download-timestamp "%Y%m%d-%H%M%S_")
  :config
  (require 'org-download)
  ;; add support to dired
  (add-hook 'dired-mode-hook 'org-download-enable)
  ;; Add handlers for drag-and-drop when Org is loaded.
  (with-eval-after-load 'org
    (org-download-enable)))

;; Denote configuration
(use-package denote
  :bind
  ("C-c n n" . 'denote)
  ("C-c n c" . 'denote-open-or-create)
  ("C-c n k" . 'denote-keywords-add)    ;; update file name automatically
  ("C-c n K" . 'denote-keywords-remove) ;; update file name automatically
  ("C-c n u" . 'denote-rename-file-using-front-matter)
  ("C-c n i" . 'denote-link) ; "insert" mnemonic
  ("C-c n I" . 'denote-link-add-links)
  ("C-c n b" . 'denote-link-backlinks)
  ("C-c n F" . 'denote-link-find-file)
  ("C-c n B" . 'denote-link-find-backlink)
  ("C-c n r" . 'denote-rename-file)
  ("C-c n R" . 'denote-rename-file-using-front-matter)
  ("C-c n a" . 'pmdn/denote-random-note)
  :init
  (setq denote-directory (concat org-directory "/denotes/"))
  :config
  (setq denote-known-keywords '("btc" "control" "datos" "economía" "emacs" "filosofía" "finanzas" "política" "productividad" "programación"))
  (setq denote-infer-keywords t)
  (setq denote-sort-keywords t)
  (setq denote-file-type nil) ; Org is the default, set others here
  (setq denote-prompts '(title keywords))
  (setq denote-excluded-directories-regexp nil)
  (setq denote-excluded-keywords-regexp nil)

  ;; Pick dates, where relevant, with Org's advanced interface:
  (setq denote-date-prompt-use-org-read-date t)

  (setq denote-date-format nil) ; read doc string

  ;; By default, we do not show the context of links.  We just display
  ;; file names.  This provides a more informative view.
  (setq denote-backlinks-show-context t)
  (setq denote-dired-directories
        (list denote-directory))

  (add-hook 'dired-mode-hook #'denote-dired-mode-in-directories)
  (set-face-attribute 'denote-faces-link nil :foreground "#EBCB8B" :inherit 'link))

;; Citar configuration
(use-package citar
  :no-require
  :custom
  (org-cite-global-bibliography (list (concat org-directory "/references/biblioteca_zotero.bib")))
  (org-cite-insert-processor 'citar)
  (org-cite-follow-processor 'citar)
  (org-cite-activate-processor 'citar)
  (citar-bibliography org-cite-global-bibliography)
  :config
  (defvar citar-indicator-notes-icons
    (citar-indicator-create
     :symbol (nerd-icons-mdicon
              "nf-md-notebook"
              :face 'nerd-icons-blue
              :v-adjust -0.3)
     :function #'citar-has-notes
     :padding "  "
     :tag "has:notes"))

  (defvar citar-indicator-links-icons
    (citar-indicator-create
     :symbol (nerd-icons-octicon
              "nf-oct-link"
              :face 'nerd-icons-orange
              :v-adjust -0.1)
     :function #'citar-has-links
     :padding "  "
     :tag "has:links"))

  (defvar citar-indicator-files-icons
    (citar-indicator-create
     :symbol (nerd-icons-faicon
              "nf-fa-file"
              :face 'nerd-icons-green
              :v-adjust -0.1)
     :function #'citar-has-files
     :padding "  "
     :tag "has:files"))

  (setq citar-indicators
        (list citar-indicator-files-icons
              citar-indicator-notes-icons
              citar-indicator-links-icons))
  (setq citar-symbol-separator "  ")
  :bind
  (:map org-mode-map :package org ("C-c i" . #'org-cite-insert)))

  ;; citar-denote package
  (use-package citar-denote
    :after (citar denote)
    :config
    (citar-denote-mode)
    (setq citar-open-always-create-notes t))

;; Latex configuration
(require 'ox-latex)
(add-to-list 'org-latex-packages-alist '("" "minted"))

(setq org-latex-listings 'minted
      org-latex-minted-options '(("breaklines" "true")
                                 ("breakanywhere" "true")
                                 ("frame" "lines")
                                 ("framesep" "2mm")
                                 ("linenos" "false")
                                 ("bgcolor" "shadecolor")))

(setq org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

(with-eval-after-load 'ox-latex
(add-to-list 'org-latex-classes
             '("org-plain-latex"
               "\\documentclass{article}
           [NO-DEFAULT-PACKAGES]
           [PACKAGES]
           [EXTRA]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))

;; Visual fill column configuration
(use-package visual-fill-column
  :ensure t
  :hook
  (text-mode . visual-fill-column-mode)
  (org-mode . visual-fill-column-mode)
  (markdown-mode . visual-fill-column-mode)
  :custom
  (visual-fill-column-center-text t)
  (visual-fill-column-width 120))

;;org-sticky-header configuration
(use-package org-sticky-header
   :hook (org-mode . org-sticky-header-mode)
   :config
   ;; Show full path in header
   (setq org-sticky-header-full-path 'full)
   ;; Use > instead of / as separator
   (setq org-sticky-header-outline-path-separator " > "))

;; Eshell configuration
(use-package eshell
  :init
  (setq eshell-scroll-to-bottom-on-input 'all
        eshell-scroll-show-maximum-output nil
        eshell-error-if-no-glob t
        eshell-hist-ignoredups t
        eshell-save-history-on-exit t
        eshell-prefer-lisp-functions nil
        eshell-destroy-buffer-when-process-dies t)
  ;;Eshell would get somewhat confused if I ran the following commands
  (add-hook 'eshell-mode-hook
            (lambda ()
              (add-to-list 'eshell-visual-commands "ssh")
              (add-to-list 'eshell-visual-commands "tail")
              (add-to-list 'eshell-visual-commands "top"))))

(defun pmdn/curr-dir-git-branch-string (pwd)
  "Returns current git branch as a string, or the empty string if
PWD is not in a git repo (or the git command is not found)."
  (interactive)
  (when (and (not (file-remote-p pwd))
             (eshell-search-path "git")
             (locate-dominating-file pwd ".git"))
    (let* ((git-url (shell-command-to-string "git config --get remote.origin.url"))
           (git-output (shell-command-to-string (concat "git rev-parse --abbrev-ref HEAD")))
           (git-branch (s-trim git-output))
           (git-icon  "\xe0a0"))
      (concat "[" git-branch "]"))))

(defun pmdn/pwd-replace-home (pwd)
  "Replace home in PWD with tilde (~) character."
  (interactive)
  (let* ((home (expand-file-name (getenv "HOME")))
         (home-len (length home)))
    (if (and
         (>= (length pwd) home-len)
         (equal home (substring pwd 0 home-len)))
        (concat "~" (substring pwd home-len))
      pwd)))

(defun pmdn/pwd-shorten-dirs (pwd)
  "Shorten all directory names in PWD except the last two."
  (let ((p-lst (split-string pwd "/")))
    (if (> (length p-lst) 2)
        (concat
         (mapconcat (lambda (elm) (if (zerop (length elm)) ""
                               (substring elm 0 1)))
                    (butlast p-lst 2)
                    "/")
         "/"
         (mapconcat (lambda (elm) elm)
                    (last p-lst 2)
                    "/"))
      pwd)))  ;; Otherwise, we just return the PWD

(defun pmdn/split-directory-prompt (directory)
  (if (string-match-p ".*/.*" directory)
      (list (file-name-directory directory) (file-name-base directory))
    (list "" directory)))

(defun pmdn/python-prompt ()
  "Returns a string (may be empty) based on the current Python
   Virtual Environment. Assuming the M-x command: `pyvenv-activate'
   has been called."
  (when (not (eq pyvenv-virtual-env-name 'nil))
    (concat "(" pyvenv-virtual-env-name ")")))

(defun eshell/eshell-local-prompt-function ()
  "A prompt for eshell that works locally (in that is assumes
that it could run certain commands) in order to make a prettier,
more-helpful local prompt."
  (interactive)
  (let* ((pwd        (eshell/pwd))
         (directory (pmdn/split-directory-prompt
                     (pmdn/pwd-shorten-dirs
                      (pmdn/pwd-replace-home pwd))))
         (parent (car directory))
         (name   (cadr directory))
         (branch (pmdn/curr-dir-git-branch-string pwd))
         (python (when (not (file-remote-p pwd)) (pmdn/python-prompt)))

         (dark-env (eq 'dark (frame-parameter nil 'background-mode)))
         (for-name  `(:weight bold :foreground "#81A1C1"))
         (for-bars                 `(:weight bold))
         (for-parent  (if dark-env `(:foreground "dark orange") `(:foreground "blue")))
         (for-dir     (if dark-env `(:foreground "orange" :weight bold)
                        `(:foreground "blue" :weight bold)))
         (for-git                  `(:foreground "LightSeaGreen"))
         (for-python               `(:foreground "DarkGrey")))

    (concat
     (propertize (user-login-name) 'face for-name)
     (propertize "@" 'face for-name)
     (propertize (system-name) 'face for-name)
     (propertize " : " 'face for-bars)
     (propertize parent   'face for-parent)
     (propertize name     'face for-dir)
     (when branch
       (concat (propertize " : "    'face for-bars)
               (propertize branch   'face for-git)))
     (when python
       (concat (propertize " : " 'face for-bars)
               (propertize python 'face for-python)))
     ;;(propertize "\n"     'face for-bars)
     (propertize (if (= (user-uid) 0) " #" " $") 'face `(:weight ultra-bold))
     ;; (propertize " └→" 'face (if (= (user-uid) 0) `(:weight ultra-bold :foreground "red") `(:weight ultra-bold)))
     (propertize " "    'face `(:weight bold)))))

(setq-default eshell-prompt-function #'eshell/eshell-local-prompt-function)

(setq eshell-highlight-prompt nil)

(defun pmdn/eshell-here ()
  "Opens up a new shell in the directory associated with the
    current buffer's file. The eshell is renamed to match that
    directory to make multiple eshell windows easier."
  (interactive)
  (let* ((height (/ (window-total-height) 4)))
    (split-window-vertically (- height))
    (other-window 1)
    (eshell "new")
    (insert (concat "ls"))
    (eshell-send-input)))

(bind-key "C-!" 'pmdn/eshell-here)

;; Magit for git
(use-package magit
  :ensure t
  :bind (("C-x g" . magit-status)))

;; diff-hl to show VC changes
(use-package diff-hl
  :ensure t
  :config
  ;;(diff-hl-flydiff-mode)
  :hook
  ((after-init . global-diff-hl-mode)
   (dired-mode . diff-hl-dired-mode)
   (magit-pre-refresh . diff-hl-magit-pre-refresh)
   (magit-post-refresh . diff-hl-magit-post-refresh))
  :custom
  (diff-hl-draw-borders nil))

;; Easier to see if parenthesis are well closed
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

;; Htmlize. To retain code coloring at html export
(use-package htmlize
  :ensure t)

;; To retain the background color of the used theme
(add-hook 'org-export-before-processing-hook 'pmdn/org-inline-css-hook)

;; Eglot configuration
(cond ((eq system-type 'windows-nt)
       ;; Windows-specific code goes here.
       (use-package eglot
         :ensure t
         :defer t
         :hook ((python-mode . eglot-ensure)
                (c-mode . eglot-ensure)
                (c++-mode . eglot-ensure))
         :custom
         (eglot-autoshutdown t)
         :config
         (add-to-list 'eglot-server-programs '((c++-mode c-mode) "clangd"))
          ;;Eglot will change the completion-category-defaults. And I can make it work by customizing completion-category-overrides
         (setq completion-category-overrides '((eglot (styles orderless)))))

       )
      ((eq system-type 'gnu/linux)
       ;; Linux-specific code goes here.
       (use-package eglot
         :ensure t
         :defer t
         :hook ((python-mode . eglot-ensure)
                (c-mode . eglot-ensure)
                (c++-mode . eglot-ensure))
         :custom
         (eglot-autoshutdown t)
         :config
         (add-to-list 'eglot-server-programs '((c++-mode c-mode) "clangd-14"))
                         ;;Eglot will change the completion-category-defaults. And I can make it work by customizing completion-category-overrides
         (setq completion-category-overrides '((eglot (styles orderless)))))

       ))

(cond ((eq system-type 'windows-nt)
     ;; Windows-specific code goes here.
     )
    ((eq system-type 'gnu/linux)
     ;; Linux-specific code goes here.
     (setq org-babel-python-command "python3")
     ))

;; Python mode configuration
(use-package python
  :mode ("\\.py\\'" . python-mode)
        ("\\.wsgi$" . python-mode)
  :interpreter ("python" . python-mode)
  :config
  (setq python-indent-offset 4))

(pmdn/append-to-path "~/.local/bin")

;; Pyvenv configuration
(use-package pyvenv
  :ensure t
  :config
  (pyvenv-mode 1))

;; Sly configuration
(use-package sly
  :ensure t
  :defer t
  :mode "\\.lisp\\'"
  :config
  (setq inferior-lisp-program "sbcl"))

;; Geiser-Guile configuration
(use-package geiser-guile
  :ensure t
  :config
  (setq geiser-default-implementation 'guile)
  (setq geiser-active-implementations '(guile)))

;; markdown-mode configuration
(use-package markdown-mode
  :ensure t
  :mode ("\\.md\\'" . markdown-mode))

;; csv-mode configuration
(use-package csv-mode
  :defer t
  :mode ("\\.csv\\'" . csv-mode)
  :hook ((csv-mode . csv-align-mode)
         (csv-mode . csv-header-line)))

;; json-mode configuration
(use-package json-mode
   :defer t
   :mode ("\\.json\\'" . json-mode))

;; yaml-mode configuration
(use-package yaml-mode
   :defer t
   :mode (("\\.ya?ml\\'" . yaml-mode)))

;; yasnippet configuration
(use-package yasnippet
  :ensure t
  :demand t
  :defer 5
  :config (yas-global-mode))

;; yasnippet-snippets configuration
(use-package yasnippet-snippets
  :ensure t
  :after yasnippet
  :config (yasnippet-snippets-initialize))

;; Configure Elfeed
(use-package elfeed
  :ensure t
  :defer t
  :config
  (setq elfeed-db-directory (expand-file-name "elfeed" user-emacs-directory)
        elfeed-show-entry-switch 'display-buffer)
  (setq elfeed-search-filter "@1-months-ago +unread")
  :bind
  ("C-x w" . elfeed ))

;; Configure Elfeed with org mode
(use-package elfeed-org
  :defer nil
  :after elfeed
  :init
  (elfeed-org)
  :config
  (setq rmh-elfeed-org-files (list  (concat org-directory "/elfeed.org"))))

;; Doc-View configuration for pdf files
(use-package doc-view
  :custom
  (doc-view-resolution 300)
  (doc-view-mupdf-use-svg t)
  (large-file-warning-threshold (* 50 (expt 2 20))))

;; Configure gptel
(use-package gptel
  :config
  (setq gptel-default-mode 'org-mode)
  ;; default backend
  (setq
   gptel-model 'llama3.2
   gptel-backend (gptel-make-ollama "Ollama"
                   :host "localhost:11434"
                   :stream t
                   :models '(llama3.2))))

;; Local Variables:
;; byte-compile-warnings: (not free-vars noruntime)
;; End:

;;; init.el ends here
