#+TITLE: Emacs configuration from org file
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
#+STARTUP: overview

* Welcome

This is my configuration, now written as an Org Mode document.  This file generates [[file:init.el][init.el]] which can be loaded by Emacs at startup.
The configuration is inspired by [[https://github.com/daviwil/emacs-from-scratch][System Crafters]], [[https://github.com/daviwil/dotfiles/tree/master/.emacs.d][David Wilson]], [[https://github.com/hrs][Harry R. Schwartz]], [[https://github.com/geolessel][Geoffrey Lessel]], [[https://config.phundrak.com/emacs/][Phundrak]] and more.

To start emacs in client mode, run from command line:

Windows: ~emacsclientw -n fichero_a_abrir~
Linux: ~emacsclient -n fichero_a_abrir~

Or from the "open with" constext menu in windows using emacsclientw.exe.

To close te file opened in the client once edited, use =C-x #=.

#+begin_src emacs-lisp

  ;;; init.el --- My Emacs initialization -*- lexical-binding: t -*-

  ;;; Commentary:

  ;; Emacs Startup File --- initialization for Emacs
  ;; Do not edit this file directly!
  ;; This file is automathically generated by ~org-bable-tangle~ on Emacs.org

  ;;; Code:

  ;; Better garbage collection threshold
  (setq gc-cons-threshold (* 50 1000 1000))
  ;; GnuPG keyring path correction
  (setq package-gnupghome-dir "~/.emacs.d/elpa/gnupg")
  ;; Start server only if not in terminal
  (when (or (eq system-type 'windows-nt)
          (eq system-type 'gnu/linux))
  (server-start))
#+end_src

* Package system setup

Emacs has a built in package manager but it doesn't make it easy to automatically install packages on a new system the first time you pull down your configuration.  [[https://github.com/jwiegley/use-package][use-package]] is a really helpful package used in this configuration to make it a lot easier to automate the installation and configuration of everything else we use.

 Syntax example:
 
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package package-name      ; use the package package-name
    :straight t                  ; use straight to manage it
    :init                        ; execute code BEFORE package load
    (setq foo-variable t)
    :config                      ; execute code AFTER package load
    (foo-mode 1)
  )
#+END_SRC

#+begin_src emacs-lisp

  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("nongnu" . "https://elpa.nongnu.org/nongnu/")
                           ;("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

* Custom functions

Funtions to be used in the config file.

#+BEGIN_SRC  emacs-lisp
  ;;Custom function definitions:
  (defun pmdn/append-to-path (path)
    "Add a path both to the $PATH variable and to Emacs' ~exec-path~."
    (setenv "PATH" (concat (getenv "PATH") ":" path))
    (add-to-list 'exec-path path))
#+END_SRC

#+begin_src emacs-lisp
  (defun pmdn/set-margins ()
    "Set margins in current buffer."
    (setq left-margin-width 3)
    (setq right-margin-width 3))
#+end_src

#+begin_src emacs-lisp
  (defun pmdn/org-mode-setup ()
    "Set basic org mode configuration hooks."
    (org-indent-mode 0)
    (variable-pitch-mode 1)
    (visual-line-mode 1))
#+end_src

#+begin_src emacs-lisp
  (defun pmdn/org-babel-tangle-config ()
    "Activate tangle only if buffer is Emacs.org config file."
    (when (or (string-equal (buffer-file-name)
                        (expand-file-name "~/.emacs.d/Emacs.org"))
              (string-equal (buffer-file-name)
                        (expand-file-name "~/.dotfiles/.emacs.d/Emacs.org")))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))
#+end_src

#+begin_src emacs-lisp
  (defun pmdn/denote-random-note (&optional directory)
    "Open a random denote."
    (interactive)
    (let* ((denote-directory (or directory denote-directory))
           (files (denote-directory-files)))
      (find-file (nth (random (length files)) files))))
#+end_src

#+begin_src emacs-lisp
  (defun pmdn/org-inline-css-hook (exporter)
    "Insert custom inline css to automatically set the background of code to whatever theme I'm using's background. Also embed css into html file."
    (when (eq exporter 'html)
      (let* ((my-pre-bg (face-background 'default))
             (my-pre-fg (face-foreground 'default))
             (dir (ignore-errors (file-name-directory (buffer-file-name))))
             (path (concat dir "style.css"))
             (homestyle (or (null dir) (null (file-exists-p path))))
             (final (if homestyle (concat org-directory "/src/readtheorg_theme/css/readtheorg.css") path)))
        (setq
         org-html-head-extra
         (concat
          org-html-head-extra
          (format "<style type=\"text/css\">\n pre.src {background-color: %s; color: %s;}</style>\n"
                  my-pre-bg my-pre-fg)))
        (setq org-html-head-include-default-style nil)
        (setq org-html-head (concat
                           "<style type=\"text/css\">\n"
                           "<!--/*--><![CDATA[/*><!--*/\n"
                           (with-temp-buffer
                             (insert-file-contents final)
                             (buffer-string))
                           "/*]]>*/-->\n"
                           "</style>\n")))))
#+end_src

#+begin_src emacs-lisp
  (defun pmdn/remove-non-sentence-breaks (begin end)
    "Remove line breaks in the region unless preceded by a period.
  When called interactively, operates on the selected region.
  BEGIN and END specify the region boundaries."
    (interactive "r")
    (save-excursion
      (save-restriction
        (narrow-to-region begin end)
        (goto-char (point-min))
        ;; Continue while we can find a newline
        (while (re-search-forward "\n" nil t)
          (save-excursion
            ;; Check character before newline
            (backward-char)
            (unless (looking-back "\\." (- (point) 1))
              ;; If not preceded by period, replace newline with space
              (replace-match " ")))))))
#+end_src

#+begin_src emacs-lisp
  (defcustom pmdn/tmp-buffer-mode-alist
    '((?o . org-mode)
      (?t . text-mode)
      (?m . markdown-mode)
      (?l . lisp-interaction-mode))
    "List of major modes for temporary buffers and their hotkeys."
    :type '(alist :key-type character :value-type symbol))

  (defun pmdn/tmp-buffer-completion-table ()
    "Create completion table for temporary buffer modes."
    (mapcar (lambda (item)
              (cons (format "%c: %s" (car item) (cdr item))
                    (car item)))
            pmdn/tmp-buffer-mode-alist))

  (defun pmdn/tmp-buffer ()
    "Open temporary buffer in specified major mode."
    (interactive)
    (let* ((completion-table (pmdn/tmp-buffer-completion-table))
           (choice (completing-read "Select mode: " completion-table nil t))
           (mode-char (cdr (assoc choice completion-table)))
           (buf (generate-new-buffer "*tmp*")))
      (with-current-buffer buf
        (funcall (cdr (assoc mode-char pmdn/tmp-buffer-mode-alist))))
      (pop-to-buffer buf)))
#+end_src

#+begin_src emacs-lisp
  (defun pmdn/reload-emacs-configuration ()
    "Reload the 'init.el' configuration file."
    (interactive)
    (load-file "~/.emacs.d/init.el"))
#+end_src

#+begin_src emacs-lisp
  (defun pmdn/keyboard-quit-dwim ()
    "Do-What-I-Mean behaviour for a general `keyboard-quit'from Prot.

  The generic `keyboard-quit' does not do the expected thing when
  the minibuffer is open.  Whereas we want it to close the
  minibuffer, even without explicitly focusing it.

  The DWIM behaviour of this command is as follows:

  - When the region is active, disable it.
  - When a minibuffer is open, but not focused, close the minibuffer.
  - When the Completions buffer is selected, close it.
  - In every other case use the regular `keyboard-quit'."
    (interactive)
    (cond
     ((region-active-p)
      (keyboard-quit))
     ((derived-mode-p 'completion-list-mode)
      (delete-completion-window))
     ((> (minibuffer-depth) 0)
      (abort-recursive-edit))
     (t
      (keyboard-quit))))
#+end_src

#+begin_src emacs-lisp
  (defun pmdn/org-export-output-file-name-modified (orig-fun extension &optional subtreep pub-dir)
    "Set org export directory, even when narrowing (otherwise, '#+EXPORT_FILE_NAME:' would be ok)"
    (unless pub-dir
      (setq pub-dir "exports")
      (unless (file-directory-p pub-dir)
        (make-directory pub-dir)))
    (apply orig-fun extension subtreep pub-dir nil))
  (advice-add 'org-export-output-file-name :around #'pmdn/org-export-output-file-name-modified)
#+end_src

* Basic UI configuration

This section configures basic UI settings that remove unneeded elements to make Emacs look a lot more minimal and modern.  If you're just getting started in Emacs, the menu bar might be helpful so you can remove the =(menu-bar-mode -1)= line if you'd like to still see that.

#+begin_src emacs-lisp
  ;; UTF-8 everywhere
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)

  ;; User interface
  (menu-bar-mode -1)          ; Disable the menu bar
  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  ;; (set-fringe-mode 10)        ; Give some breathing room. Not needed with spacious-padding

  ;; GIve some air in text mode by increasing margins
  ;;(add-hook 'text-mode-hook 'pmdn/set-margins)

  ;; Set up the visible bell
  (setq visible-bell t)

  ;; Calendar setting
  (setq calendar-date-style 'iso)
  (setq calendar-month-name-array
        ["Enero" "Febrero" "Marzo" "Abril" "Mayo" "Junio"
         "Julio"    "Agosto"   "Septiembre" "Octubre" "Noviembre" "Diciembre"])
      
  (setq calendar-day-name-array
        ["Domingo" "Lunes" "Martes" "Miércoles" "Jueves" "Viernes" "Sábado"])
  (setq calendar-week-start-day 1)
  (setq calendar-holidays '((holiday-fixed 1 1 "Año Nuevo")
                            (holiday-fixed 1 6 "Reyes Magos")
                            (holiday-fixed 4 17 "Jueves Santo")
                            (holiday-fixed 4 18 "Viernes Santo")
                            (holiday-fixed 4 21 "Lunes de Pascua")
                            (holiday-fixed 5 1 "Dia del Trabajo")
                            (holiday-fixed 6 24 "San Juan Bautista")
                            (holiday-fixed 7 25 "Santiago Apóstol")
                            (holiday-fixed 7 31 "San Ignacio de Loyola")
                            (holiday-fixed 8 15 "Asunción")
                            (holiday-fixed 10 12 "Día de la Hispanidad")
                            (holiday-fixed 11 01 "Todos los Santos")
                            (holiday-fixed 12 06 "Constitución")
                            (holiday-fixed 12 25 "Navidad")
                            ))

  ;; Show column numbers in mode line and line numbers on window
  (column-number-mode)
  ;; (global-display-line-numbers-mode t)
  ;;
  ;; ;; Disable line numbers for some modes
  ;; (dolist (mode '(org-mode-hook
  ;;                 term-mode-hook
  ;;                 shell-mode-hook
  ;;                 treemacs-mode-hook
  ;;                 eshell-mode-hook
  ;;                 deft-mode-hook
  ;;                 org-agenda-mode-hook))
  ;;   (add-hook mode (lambda () (display-line-numbers-mode 0))))
  ;; Show line numbers only on prog modes
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)  

  ;; When something changes a file, automatically refresh the buffer containing it.
  (global-auto-revert-mode t)

  ;; Visually indicate matching pairs of parentheses.
  (show-paren-mode t)

  ;; Insert closing parenthesis, bracket... pairs automatically
  (electric-pair-mode 1)
  (setq electric-pair-preserve-balance nil)

  ;; y-or-n answers
  (fset 'yes-or-no-p 'y-or-n-p)	

  ;; Set tab width to 4 spaces and Allman indentation (bsd) in C
  (setq-default tab-width 4)
  (setq-default indent-tabs-mode nil)
  (setq indent-line-function 'insert-tab)
  (setq c-default-style "bsd"
        c-basic-offset 4)

  ;; Kill the current buffer when selecting a new directory
  (setq dired-kill-when-opening-new-dired-buffer t)

  ;; tab-bar configuration
  (setq tab-bar-show 1)                      ;; hide bar if at least 1 tab open
  (setq tab-bar-close-button-show nil)       ;; hide tab close / X button
  (setq tab-bar-new-tab-choice "*dashboard*");; buffer to show in new tabs
  (setq tab-bar-tab-hints t)                 ;; show tab numbers
  (setq tab-bar-separator " ")                ;; separator
  (setq tab-bar-format '(tab-bar-format-menu-bar
                         tab-bar-format-tabs
                         tab-bar-separator)) ;; elements to include in bar
  (setq tab-bar-select-tab-modifiers '(meta));; fast selection
  (setq tab-bar-new-tab-to 'rightmost)       ;; placement of new tab
  ;;To make ediff to be horizontally split
  (setq ediff-split-window-function 'split-window-horizontally)
  ;;To make ediff operate on selected-frame
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  ;;To use project.el in non-versioned files
  (setq project-vc-extra-root-markers '(".project"))

#+end_src

* Who am I?

Personal information.

#+BEGIN_SRC emacs-lisp

  (setq user-full-name "Patxi Madina")
  (cond ((eq system-type 'windows-nt)
         ;; Windows-specific code goes here.
         (setq user-mail-address "pmadina@mondragon.edu"))
        ((eq system-type 'gnu/linux)
         ;; Linux-specific code goes here.
         (setq user-mail-address "pmdn@mailbox.org")
         ))

#+END_SRC

* Directory organizing
This sections makes sure the directory stays organized

#+begin_src emacs-lisp

  ;; Custom command stored on its own file
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file 'noerror))
  ;; Back-up directories
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))

#+end_src

* Key bindings

In this section global key bindings are added.

#+begin_src emacs-lisp

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c e") 'pulsar-pulse-line)
  (global-set-key (kbd "C-c j") 'pmdn/remove-non-sentence-breaks)
  (global-set-key (kbd "C-c C-t") 'pmdn/tmp-buffer)
  (global-set-key (kbd "C-g") 'pmdn/keyboard-quit-dwim)

#+end_src

* UI configurations

** Color theme
[[https://protesilaos.com/emacs/modus-themes][modus-themes]] are highly accessible themes, conforming with the highest standard for colour contrast between background and foreground values (WCAG AAA). They also are optimised for users with red-green colour deficiency.

The themes are very customisable and provide support for a very wide range of packages. Their manual is detailed so that new users can get started, while it also provides custom code for all sorts of more advanced customisations.

#+begin_src emacs-lisp
  ;; modus themes configuration
  (use-package modus-themes
    :ensure
    :init
    ;; Add all your customizations prior to loading the themes
    ;; Remove the border
    (setq modus-themes-common-palette-overrides
          '((border-mode-line-active unspecified)
            (border-mode-line-inactive unspecified)
            (fringe unspecified)))
    (setq modus-themes-italic-constructs t
          modus-themes-bold-constructs t
          modus-themes-variable-pitch-ui t
          modus-themes-mixed-fonts t
          modus-themes-headings
          '((0 . (variable-pitch regular 1.2))
            (1 . (variable-pitch regular 1.2))
            (2 . (variable-pitch regular 1.1))
            (3 . (variable-pitch regular 1.1))
            (4 . (variable-pitch regular 1.1))
            (5 . (variable-pitch regular 1.1)) 
            (6 . (variable-pitch regular 1.1))
            (7 . (variable-pitch regular 1.1)))))
#+end_src

[[https://protesilaos.com/emacs/ef-themes][ef-themes]] are a collection of light and dark themes for GNU Emacs whose goal is to provide colorful ("pretty") yet legible options.

#+begin_src emacs-lisp
  ;; ef themes configuration
  (use-package ef-themes
    :ensure t
    :config
    (setq ef-themes-variable-pitch-ui t
        ef-themes-mixed-fonts t
        ef-themes-headings
        '((0 . (variable-pitch regular 1.2))
          (1 . (variable-pitch regular 1.2))
          (2 . (variable-pitch regular 1.1))
          (3 . (variable-pitch regular 1.1))
          (4 . (variable-pitch regular 1.1))
          (5 . (variable-pitch regular 1.1)) 
          (6 . (variable-pitch regular 1.1))
          (7 . (variable-pitch regular 1.1))))
    (load-theme 'ef-elea-dark t))
#+end_src

** Fonts

#+begin_src emacs-lisp
  (cond ((eq system-type 'windows-nt)
       ;; Windows-specific code goes here.
       ;; Spacing
       (setq-default line-spacing 0.25)
       ;; Set DejaVu font for the some glyphs
       (set-fontset-font t ?◉ "DejaVu Sans")
       (set-fontset-font t ?▾ "DejaVu Sans")
       )
      ((eq system-type 'gnu/linux)
       ;; Linux-specific code goes here.
       ))

  ;; Use mono fonts for better alignment
  (set-face-attribute 'default nil
                      :font "Fira Mono"
                      :weight 'regular
                      :height 100)

  (set-face-attribute 'fixed-pitch nil
                      :font "Fira Mono"
                      :weight 'regular
                      :height 100)

  (set-face-attribute 'variable-pitch nil
                      :font "Fira Sans"
                      :weight 'light
                      :height 105)

  ;; This sets de default font, as 'set-face-attribute' does not seem to work 
  (add-to-list 'default-frame-alist '(font . "Fira Mono-10"))
#+end_src

** Icons

*NOTE:* The first time you load your configuration on a new machine, you'll need to run =M-x all-the-icons-install-fonts= and  =M-x nerd-icons-install-fonts= so that mode line icons display correctly.

#+begin_src emacs-lisp
  ;; All the icons
  (use-package all-the-icons
    :ensure t)
  ;; Nerd icons
  (use-package nerd-icons
    :ensure t)
#+end_src

** Better Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

#+begin_src emacs-lisp
  ;; Configure Doom Modeline
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :config (setq mode-line-right-align-edge 'right-fringe)
    :custom ((doom-modeline-buffer-file-name-style 'truncate-except-project)))
#+end_src

** Diminish  

[[https://github.com/emacsmirror/diminish][Diminish]] implements hiding or abbreviation of the mode line displays (lighters) of minor-modes.

#+begin_src emacs-lisp

;; Diminish minor modes
(use-package diminish
  :ensure t)

#+end_src

** Which Key

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix.  For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run.  This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp

;; To show next commands with which-key
(use-package which-key
  :defer 0
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 0.5))

#+end_src

** Dashboard

[[https://github.com/emacs-dashboard/emacs-dashboard][Dashboard]] is an extensible emacs startup screen showing you what’s most important.

#+BEGIN_SRC emacs-lisp
  ;; Dashboard configuration
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    ; set the title
    (setq dashboard-banner-logo-title "Bienvenido a Emacs!")
    ; set the banner
    (setq dashboard-startup-banner "~/.emacs.d/emacs-splash.png")
    (setq dashboard-projects-backend 'project-el)
    ; display icons on both GUI and terminal
    (setq dashboard-display-icons-p t)
    ; use `nerd-icons' package
    (setq dashboard-icon-type 'nerd-icons)
    (setq dashboard-navigator-buttons
          `(;; line1
            ;; Shortcuts
            ((,(nerd-icons-octicon "nf-oct-mark_github" :height 1.0 :v-adjust 0.0)
              "Github"
              "Github repository"
              (lambda (&rest _) (browse-url "https://github.com/pmdn/dotfiles/tree/master/.emacs.d")))
            (,(nerd-icons-octicon "nf-oct-tools" :height 1.0 :v-adjust 0.0)
              "Config"
              "Configuration file"
              (lambda (&rest _) (find-file (expand-file-name  "~/.emacs.d/Emacs.org"))))
            (,(nerd-icons-octicon "nf-oct-rss" :height 0.9 :v-adjust 0.0)
              "Elfeed"
              "Go to rss feed"
              (lambda (&rest _) (elfeed))))))
    ; set the sections I'd like displayed and how many of each
    (setq dashboard-items '((recents . 7) (projects . 5) (bookmarks . 5) (agenda . 5)))
    (setq dashboard-heading-icons '((recents   . "nf-oct-history")
                                (bookmarks . "nf-oct-bookmark")
                                (agenda    . "nf-oct-calendar")
                                (projects  . "nf-oct-rocket")
                                (registers . "nf-oct-database")))
    (setq dashboard-startupify-list '(dashboard-insert-banner
                                  dashboard-insert-newline
                                  dashboard-insert-banner-title
                                  dashboard-insert-newline
                                  dashboard-insert-navigator
                                  dashboard-insert-newline
                                  dashboard-insert-init-info
                                  dashboard-insert-items
                                  dashboard-insert-newline
                                  dashboard-insert-footer))
    ; center it all
    (setq dashboard-center-content t)
    ; show shortcut keys
    (setq dashboard-show-shortcuts t)
    ; use nice icons for the files
    (setq dashboard-set-file-icons t)
    ; use nice section icons
    (setq dashboard-set-heading-icons t)
    ; disable the snarky footer
    (setq dashboard-set-footer nil))

#+END_SRC

** Nerd-icons-dired

[[https://github.com/rainstormstudio/nerd-icons-dired][nerd-icons-dired]] brings icons to =dired=.

#+begin_src emacs-lisp
  ;; nerd-icons in dired
  (use-package nerd-icons-dired
    :hook
    (dired-mode . nerd-icons-dired-mode))
#+end_src

** Dired-Sidebar

[[https://github.com/jojojames/dired-sidebar][dired-sidebar]] is a file and project explorer in tree mode for quick navigation and exploration based on =dired=.

#+begin_src emacs-lisp

  ;;Dired-Sidebar configuration
  (use-package dired-sidebar
    :bind (("C-c s" . dired-sidebar-toggle-sidebar))
    :ensure t
    :commands (dired-sidebar-toggle-sidebar)
    :config
    ;;(setq dired-sidebar-subtree-line-prefix "__")
    (setq dired-sidebar-theme 'ascii))

#+end_src

** Pulsar

[[https://github.com/protesilaos/pulsar][pulsar]] is a small package that temporarily highlights the current line after a given function is invoked. It uses the built in =pulse.el= package.

#+begin_src emacs-lisp
  ;; pulsar configuration 
  (use-package pulsar
    :custom
    ;; NOTE: The commented out functions are from before
    ;; the introduction of `pulsar-pulse-on-window-change'.  Try
    ;; that instead.
    (pulsar-pulse-functions ; Read the doc string for why not `setq'
     '(recenter-top-bottom
       move-to-window-line-top-bottom
       reposition-window
       bookmark-jump
       other-window
       delete-window
       delete-other-windows
       forward-page
       backward-page
       scroll-up-command
       scroll-down-command
       windmove-right
       windmove-left
       windmove-up
       windmove-down
       windmove-swap-states-right
       windmove-swap-states-left
       windmove-swap-states-up
       windmove-swap-states-down
       tab-new
       tab-close
       tab-next
       org-next-visible-heading
       org-previous-visible-heading
       org-forward-heading-same-level
       org-backward-heading-same-level
       outline-backward-same-level
       outline-forward-same-level
       outline-next-visible-heading
       outline-previous-visible-heading
       ace-window
       outline-up-heading))
    :config
    (pulsar-global-mode 1)
    (setq pulsar-pulse t)
    (setq pulsar-delay 0.055)
    (setq pulsar-iterations 10)
    (setq pulsar-face 'pulsar-yellow)
    (setq pulsar-highlight-face 'pulsar-yellow))
#+end_src

** Avy

[[https://github.com/abo-abo/avy][avy]] is a GNU Emacs package for jumping to visible text using a char-based decision tree.

#+begin_src emacs-lisp
  ;; Configure avy
  (use-package avy
    :ensure t
    :bind (("C-:" . avy-goto-char)
           ("C-M-:" . avy-goto-char-2)))
#+end_src

** Breadcrumb

Breadcrumbs are sequences of short strings indicating where you are in some big tree-like maze that is probably your code. [[https://github.com/joaotavora/breadcrumb][Breadcrumb]] is a package for headerline indication of where you are in a large project.

#+begin_src emacs-lisp
  ;;Breadcrumb configuration
  (use-package breadcrumb
    :hook (prog-mode . breadcrumb-local-mode))
#+end_src

** Rainbow mode

[[https://elpa.gnu.org/packages/rainbow-mode.html][rainbow-mode]] is a package to colorize color names in buffers.

#+begin_src emacs-lisp
  ;; rainbow-mode configuration 
  (use-package rainbow-mode
    :ensure t
    :hook
    (prog-mode . rainbow-mode)
    (text-mode . rainbow-mode))
#+end_src

** Nerd icons in ibuffer

[[https://github.com/seagle0128/nerd-icons-ibuffer][nerd-icons-ibuffer]] displays nerd icons in ibuffer.

#+begin_src emacs-lisp
  ;; Configure nerd-icons-ibuffer
  (use-package nerd-icons-ibuffer
    :ensure t
    :hook (ibuffer-mode . nerd-icons-ibuffer-mode))
#+end_src

** Spacious padding

[[https://github.com/protesilaos/spacious-padding][spacious-padding]] provides a global minor mode to increase the spacing/padding of Emacs windows and frames.

#+begin_src emacs-lisp
  ;; spacious-padding configuration
  (use-package spacious-padding
    :ensure t
    :custom
    (spacious-padding-widths
        '( :internal-border-width 15
           :header-line-width 2
           :mode-line-width 2
           :tab-width 2
           :right-divider-width 30
           :scroll-bar-width 0
           :fringe-width 8))
    :config
    (spacious-padding-mode 1))
#+end_src

* Completion framework

Completion in Emacs is key. Previously I used [[https://oremacs.com/swiper/][Ivy/Swiper/Counsel]] for the minibuffer and [[https://company-mode.github.io/][Company]] for in-buffer completion. Although they are nice and work perfectly, I have decided to go on with more /emacsy/ alternatives, that make use of built-in emacs capabilities instead of adding their own. This make them more scalable and easier to mantain. Below are some configuration examples, as well as some tutorials explaining the different functionalities of the packages.

Configurations:
- [[https://github.com/jeremyf/dotemacs/blob/main/emacs.d/configuration.org#how-does-this-thing-work][Jeremy Friesen]] (also [[https://codeberg.org/takeonrules/dotemacs/src/branch/main/emacs.d/configuration.org#headline-11][here]]).
- [[https://config.daviwil.com/emacs#completion-system][David Will]]
- [[https://protesilaos.com/emacs/dotemacs#h:98d3abcc-f34e-4029-aabc-740f0b6421f8][Protesilaos Stavrou]]
- [[https://sgtpeacock.com/dot-files/Emacs.html#org8b90451][Samuel Thomas]]
- [[https://github.com/rougier/dotemacs/blob/master/dotemacs.org#completion][Nicolas P. Rougier]]

Corfu + orderless with eglot: https://github.com/minad/corfu/issues/136

Tutorials: 
- https://www.youtube.com/watch?v=43Dg5zYPHTU
- https://www.youtube.com/watch?v=5ffb2at2d7w
- https://www.youtube.com/watch?v=UtqE-lR2HCA&pp=ugMICgJlcxABGAE%3D
- https://www.youtube.com/watch?v=nyz4O7EwxIk
- https://www.youtube.com/watch?v=J0OaRy85MOo
- https://www.youtube.com/watch?v=fnE0lXoe7Y0 and https://github.com/abcdw/notes/blob/master/notes/20220715092523-emacs_completion_explained.org

Articles:
- Vertico, Marginalia, Orderless: https://kristofferbalintona.me/posts/202202211546/
- Corfu: https://kristofferbalintona.me/posts/202202270056/
- Cape: https://kristofferbalintona.me/posts/202203130102/

** Orderless

[[https://github.com/oantolin/orderless][Orderless]] is a completion style that divides the pattern into space-separated components, and matches candidates that match all of the components in any order.

#+begin_src emacs-lisp
  ;; Configure orderless
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** Vertico

[[https://github.com/minad/vertico][Vertico]] is a performant and minimalistic vertical completion UI based on the default completion system and aims to be highly flexible, extensible and modular.

#+begin_src emacs-lisp
;; Enable vertico
(use-package vertico
  :init
  (vertico-mode)

  ;; Different scroll margin
  ;; (setq vertico-scroll-margin 0)

  ;; Show more candidates
  ;; (setq vertico-count 20)

  ;; Grow and shrink the Vertico minibuffer
  ;; (setq vertico-resize t)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  (setq vertico-cycle t)
  )

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))

#+end_src

** Consult

[[https://github.com/minad/consult][Consult]] provides a lot of useful completion commands similar to Ivy's Counsel but based on the Emacs completion function =completing-read=.

#+begin_src emacs-lisp
  ;; Configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings (mode-specific-map)
           ("C-c h" . consult-history)
           ("C-c m" . consult-mode-command)
           ("C-c k" . consult-kmacro)
           ;; C-x bindings (ctl-x-map)
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("C-c f" . consult-recent-file)
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ("<help> a" . consult-apropos)            ;; orig. apropos-command
           ;; M-g bindings (goto-map)
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings (search-map)
           ("M-s d" . consult-find)
           ("M-s D" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s m" . consult-multi-occur)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode))

#+end_src

** Marginalia 

[[https://github.com/minad/marginalia][Marginalia]] adds marks or annotations placed at the margin of the page of a book or in this case helpful colorful annotations placed at the margin of the minibuffer for your completion candidates.

#+begin_src emacs-lisp
  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    ;; Either bind `marginalia-cycle' globally or only in the minibuffer
    :bind (("M-A" . marginalia-cycle)
           :map minibuffer-local-map
           ("M-A" . marginalia-cycle))

    ;; The :init configuration is always executed (Not lazy!)
    :init

    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode))

  ;; Add icons to completion candidates using the built in completion metadata functions
  (use-package nerd-icons-completion
    :after marginalia
    :config
    (nerd-icons-completion-mode)
    :hook
    ('marginalia-mode-hook . 'nerd-icons-completion-marginalia-setup))

#+end_src

** Embark

[[https://github.com/oantolin/embark][Embark]] makes it easy to choose a command to run based on what is near point, both during a minibuffer completion session (in a way familiar to Helm or Counsel users) and in normal buffers.

#+begin_src emacs-lisp
  ;; Embark configuration
  (use-package embark
    :ensure t

    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t
    :after (embark consult)
    :demand t ; only necessary if you have the hook below
    ;; if you want to have consult previews as you move around an
    ;; auto-updating embark collect buffer
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

#+end_src

** Corfu

[[https://github.com/minad/corfu][Corfu]] enhances completion at point with a small completion popup similar to Company.

#+begin_src emacs-lisp
  ;; Enable Corfu
  (use-package corfu
    ;; Optional customizations
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect-first nil)    ;; Disable candidate preselection
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-echo-documentation nil) ;; Disable documentation in the echo area
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin
    (corfu-min-width 40)           ;; Set a minimun width for the corfu area

    ;; Recommended: Enable Corfu globally.
    ;; This is recommended since Dabbrev can be used globally via  M-/.
    ;; See also `corfu-excluded-modes'.
    :init
    (global-corfu-mode))

  ;; Add icons to completions in corfu
  (use-package nerd-icons-corfu
    :after corfu
    :init (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
    ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete))  
#+end_src

** Cape

[[https://github.com/minad/cape][Cape]] provides Completion At Point Extensions which can be used in combination with the [[https://github.com/minad/corfu][Corfu]] completion UI or the default completion UI. The completion backends used by =completion-at-point= are so called =completion-at-point-functions= (Capfs).

#+begin_src emacs-lisp
  ;; Add cape extensions
  (use-package cape
    ;; Bind dedicated completion commands
    ;; Alternative prefix keys: C-c p, M-p, M-+, ...
    :bind (("C-c p p" . completion-at-point) ;; capf
           ("C-c p t" . complete-tag)        ;; etags
           ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
           ("C-c p h" . cape-history)
           ("C-c p f" . cape-file)
           ("C-c p k" . cape-keyword)
           ("C-c p s" . cape-symbol)
           ("C-c p a" . cape-abbrev)
           ("C-c p i" . cape-ispell)
           ("C-c p l" . cape-line)
           ("C-c p w" . cape-dict)
           ("C-c p \\" . cape-tex)
           ("C-c p _" . cape-tex)
           ("C-c p ^" . cape-tex)
           ("C-c p &" . cape-sgml)
           ("C-c p r" . cape-rfc1345))
    :init
    ;; Add `completion-at-point-functions', used by `completion-at-point'.
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    ;;(add-to-list 'completion-at-point-functions #'cape-history)
    ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
    ;;(add-to-list 'completion-at-point-functions #'cape-tex)
    ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
    ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
    ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
    ;;(add-to-list 'completion-at-point-functions #'cape-ispell)
    ;;(add-to-list 'completion-at-point-functions #'cape-dict)
    ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
    ;;(add-to-list 'completion-at-point-functions #'cape-line)
  )
#+end_src

* Org Mode

[[https://orgmode.org/][Org Mode]] is one of the hallmark features of Emacs.  It is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package.

** Basic Config

This section contains the basic configuration for =org-mode=, including agenda, capture and refile.

Some inspiration from:
- https://paul-nameless.com/emacs-org-mode-100-books.html
- https://stackoverflow.com/questions/2581935/import-csv-into-org-mode-properties
- https://victorianoi.notion.site/

Bookmark capture from:
- https://karl-voit.at/2014/08/10/bookmarks-with-orgmode/
- https://blog.lazkani.io/posts/bookmark-with-org-capture/  

#+begin_src emacs-lisp

  ;; Org mode configuration

  ;; Change font size for headings
  (with-eval-after-load 'org-faces
    ;; Increase the size of various headings
    (set-face-attribute 'org-document-title nil :font "Fira Sans" :weight 'bold :height 1.3)
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Fira Sans" :weight 'regular :height (cdr face)))
    ;; Set fixed pitch faces
    (require 'org-indent)
    (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
    (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-date nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-block nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

  ;; Enable Markdown export
  (eval-after-load "org" '(require 'ox-md nil t))

  (use-package org
    :pin elpa
    :hook (org-mode . pmdn/org-mode-setup)
    :config
    (setq org-babel-default-header-args
          (cons '(:results . "output verbatim replace")
                (assq-delete-all :results org-babel-default-header-args)))
    (setq org-babel-lisp-eval-fn #'sly-eval)
    (setq org-ellipsis " ▾")
    ;;(setq org-adapt-indentation 'headline-data)
    (setq org-hide-emphasis-markers t)
    ;; Fix image width and show inline images
    (setq org-image-actual-width 700)
    (setq org-startup-with-inline-images t)

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
    (setq org-id-link-to-org-use-id 'use-existing)
    (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.2))

    (cond ((eq system-type 'windows-nt)
           ;; Windows-specific code goes here.
           (setq org-directory "C:/MGEP Dropbox/patxi madina hernandez/OrgFiles")
           )
          ((eq system-type 'gnu/linux)
           ;; Linux-specific code goes here.
           (setq org-directory "~/Sync/Sincronizadas/Notes/OrgFiles")
           ))
    
    (setq org-agenda-files
          (list
           (concat org-directory "/Notas.org")
           (concat org-directory "/InboxMovil.org")))
    (setq org-archive-location (concat org-directory "/Archivo.org::datetree/"))

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-todo-keywords
          '((sequence "TODO(t)" "ACTIVE(a!)" "WAITING(w@/!)" "DELEGATED(d@/!)" "SOMEDAY(s!)" "|" "DONE(D!)" "CANCELLED(C@)")
            (sequence "LEYENDO(y)" "|" "LEÍDO(i)")))

    (setq org-todo-keyword-faces
          '(("TODO".(:foreground "DarkSeaGreen" :weight bold))
            ("ACTIVE".(:foreground "LightSeaGreen" :weight bold))
            ("WAITING".(:foreground "peru" :weight bold))
            ("DELEGATED".(:foreground "CornflowerBlue" :weight bold))
            ("SOMEDAY".(:foreground "dark violet" :weight bold))
            ("DONE".(:foreground "LightGrey" :weight bold))
            ("CANCELLED".(:foreground "IndianRed" :weight bold))
            ("LEYENDO".(:foreground "peru" :weight bold))
            ("LEÍDO".(:foreground "DarkSeaGreen" :weight bold))))

    (setq org-refile-use-outline-path 'file)
    (setq org-outline-path-complete-in-steps nil)
    (setq org-refile-targets
          '(("Archivo.org" :maxlevel . 1)
            (org-agenda-files :maxlevel . 9)))

    (setq org-log-refile 'note)
    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-tag-alist
          '((:startgroup)
                                          ; Put mutually exclusive tags here
            (:endgroup)
            ("@errand" . ?E)
            ("@home" . ?H)
            ("@work" . ?W)
            ("agenda" . ?a)
            ("planning" . ?p)
            ("publish" . ?P)
            ("batch" . ?b)
            ("note" . ?n)
            ("idea" . ?i)))

    ;; Configure custom agenda views
    (setq org-tags-match-list-sublevels 'indented)
    (setq org-agenda-custom-commands
          '(("d" "Dashboard"
             ((agenda "" ((org-deadline-warning-days 7)))
              (todo "TODO" ((org-agenda-overriding-header "Todo Tasks")))
              (todo "ACTIVE" ((org-agenda-overriding-header "Active Tasks")))
              (todo "WAITING" ((org-agenda-overriding-header "Waiting Tasks")))
              (todo "DELEGATED" ((org-agenda-overriding-header "Delegated Tasks")))
              (todo "SOMEDAY" ((org-agenda-overriding-header "Someday Tasks")))))

            ("w" "Workflow Status"
             ((todo "TODO"
                    ((org-agenda-overriding-header "Todo")
                     (org-agenda-files org-agenda-files)))
              (todo "ACTIVE"
                    ((org-agenda-overriding-header "Active Tasks")
                     (org-agenda-files org-agenda-files)))
              (todo "WAITING"
                    ((org-agenda-overriding-header "Waiting on External")
                     (org-agenda-files org-agenda-files)))
              (todo "DELEGATED"
                    ((org-agenda-overriding-header "Delegated on External")
                     (org-agenda-files org-agenda-files)))
              (todo "SOMEDAY"
                    ((org-agenda-overriding-header "Maybe do Someday")
                     (org-agenda-files org-agenda-files)))
              (todo "DONE"
                    ((org-agenda-overriding-header "Completed Tasks")
                     (org-agenda-files org-agenda-files)))
              (todo "CANCELLED"
                    ((org-agenda-overriding-header "Cancelled Tasks")
                     (org-agenda-files org-agenda-files)))))

            ("b" "Bookmarks"
             ((tags
               "%bookmark"
               ((org-agenda-overriding-header "Bookmark system")))))
            
            ("r" "Needs Refile"
             ((tags
               "refile"
               ((org-agenda-overriding-header "To refile")
                (org-tags-match-list-sublevels nil)))))))

    ;; Capture templates
    (setq org-default-notes-file (concat org-directory "/Notas.org"))
    (setq org-capture-templates
          `(("f" "Fast Note" entry (file+olp org-default-notes-file "Inbox")
             "* %?\n  %U\n  %i" :empty-lines 1)
            ("t" "Tasks" entry (file+olp org-default-notes-file "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
            ("r" "Reads" entry (file+olp org-default-notes-file "Libros" "Lista Lectura")
             "*** %\\1 %?\n :PROPERTIES:\n :Título: %^{Título}\n :Subtítulo: %^{Subtítulo}\n :Serie: %^{Serie}\n :Autor: %^{Autor [Apellido, Nombre]}\n :Año: %^{Año}\n :Categoría: %^{Categoría}\n :Puntuación: %^{Puntuación [1-5]}\n :Fecha: %^{Fecha Lectura [dd/mm/aaaa]}\n :Estado: %^{Estado|Leído|Leyendo|Pendiente}\n :END: \n" :empty-lines 1 :prepend t)
            ("d" "Dailies" entry (file+datetree org-default-notes-file)
             "* %^{Description} %^g\n Added: %U\n\n %?")
            ("b" "Bookmark (Clipboard)" entry (file+olp org-default-notes-file "Bookmarks")
             "* %(org-cliplink-capture) %^g\n:PROPERTIES:\n:CREATED: %U\n:END:\n\n- %?\n" :empty-lines 1 :prepend t)))
    (add-hook 'org-capture-mode-hook #'org-id-get-create)

    ;; Set global key for capture
    (define-key global-map (kbd "C-c r")
      (lambda () (interactive) (org-capture nil "r")))
    (define-key global-map (kbd "C-c t")
      (lambda () (interactive) (org-capture nil "t")))
    (define-key global-map (kbd "C-c b")
      (lambda () (interactive) (org-capture nil "b")))
    (define-key global-map (kbd "C-c d")
      (lambda () (interactive) (org-capture nil "d"))))

#+end_src

** Nicer Heading Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.  Another option for this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]].

#+begin_src emacs-lisp
  ;; Set org bullets
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

** Show emphasis markers when needed

[[https://github.com/awth13/org-appear][org-appear]] provides a way to toggle visibility of hidden elements such as emphasis markers, links, etc. by customising specific variables, e.g., =org-hide-emphasis-markers=.

#+begin_src emacs-lisp

  ;; org-appear configuration
  (use-package org-appear
      :after org
      :hook (org-mode . org-appear-mode))
  
#+end_src

** Configure Babel Languages

To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use.  [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp
  ;; Add org babel languages
  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (python . t)
      (lisp . t)
      (scheme . t)
      (shell . t)
      (C .t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)

#+end_src

** Structure Templates

Org Mode's [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables you to quickly insert code blocks into your Org files in combination with =org-tempo= by typing =<= followed by the template name like =el= or =py= and then press =TAB=.  For example, to insert an empty =emacs-lisp= block below, you can type =<el= and press =TAB= to expand into such a block.

You can add more =src= block templates below by copying one of the lines and changing the two strings at the end, the first to be the template name and the second to contain the name of the language [[https://orgmode.org/worg/org-contrib/babel/languages.html][as it is known by Org Babel]].

#+begin_src emacs-lisp
  ;; Org tempo templates
  (with-eval-after-load 'org
   ;; This is needed as of Org 9.2
   (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("li" . "src lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("cc" . "src c"))
    ;; For more complicated expansions now ~tempo-define-template must be used. n: newline, p: point after expansion
    (tempo-define-template "org-header"
         '("#+TITLE: " p n
           "#+DESCRITION: " n
           "#+AUTHOR: " n
           "#+SETUPFILE: ./org-html-themes/org/theme-readtheorg-local.setup" n
           "#+SETUPFILE: ./org-latex-themes/jake-latex-standard.setup" n
           "#+TAGS: " n
           "#+STARTUP: overview")
         "<t"
         "Insert an header in the org file"
         'org-tempo-tags)
    (tempo-define-template "org-meeting"
        '("*Asistentes:* " n
          "- " p n n
          "*Notas:* " n
          "- " n n
          "*Tareas:* " n
          n)
        "<m"
        "Insert a meeting template in the org file"
        'org-tempo-tags)
    (tempo-define-template "references"
        '("* References" n
          "#+CITE_EXPORT: csl ~/Zotero/styles/ieee.csl" n
          "#+PRINT_BIBLIOGRAPHY:" n)
        "<r"
        "Insert references header for latex export"
        'org-tempo-tags))

#+end_src

** Auto-tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that =pmdn/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'pmdn/org-babel-tangle-config)))

#+end_src

** Org cliplink

[[https://github.com/rexim/org-cliplink][org-cliplink]] takes a URL from the clipboard and inserts an org-mode link with a title of a page found by the URL into the current buffer

#+begin_src emacs-lisp
  ;; Configure org-cliplink
  (use-package org-cliplink
    :ensure t)

#+end_src

** Org download

[[https://github.com/abo-abo/org-download][org-download]]  facilitates inserting images into org files.

#+BEGIN_SRC  emacs-lisp
  ;; org-download configuration
  (use-package org-download
    :ensure t
    :custom
      (org-download-method 'directory)
      (org-download-image-dir "images")
      (org-download-heading-lvl nil)
      (org-download-timestamp "%Y%m%d-%H%M%S_")
    :config
    (require 'org-download)
    ;; add support to dired
    (add-hook 'dired-mode-hook 'org-download-enable)
    ;; Add handlers for drag-and-drop when Org is loaded.
    (with-eval-after-load 'org
      (org-download-enable)))

#+END_SRC

** Denote

[[https://github.com/protesilaos/denote][Denote]] is a simple note-taking tool for Emacs. It is based on the idea that notes should follow a predictable and descriptive file-naming scheme. The file name must offer a clear indication of what the note is about, without reference to any other metadata. Denote basically streamlines the creation of such files while providing facilities to link between them.

#+begin_src emacs-lisp
  ;; Denote configuration
  (use-package denote
    :bind
    ("C-c n n" . 'denote)
    ("C-c n c" . 'denote-open-or-create)
    ("C-c n k" . 'denote-keywords-add)    ;; update file name automatically
    ("C-c n K" . 'denote-keywords-remove) ;; update file name automatically
    ("C-c n u" . 'denote-rename-file-using-front-matter)
    ("C-c n i" . 'denote-link) ; "insert" mnemonic
    ("C-c n I" . 'denote-link-add-links)
    ("C-c n b" . 'denote-link-backlinks)
    ("C-c n F" . 'denote-link-find-file)
    ("C-c n B" . 'denote-link-find-backlink)
    ("C-c n r" . 'denote-rename-file)
    ("C-c n R" . 'denote-rename-file-using-front-matter)
    ("C-c n a" . 'pmdn/denote-random-note)
    :init
    (setq denote-directory (concat org-directory "/denotes/"))
    :config
    (setq denote-known-keywords '("btc" "control" "datos" "economía" "emacs" "filosofía" "finanzas" "política" "productividad" "programación"))
    (setq denote-infer-keywords t)
    (setq denote-sort-keywords t)
    (setq denote-file-type nil) ; Org is the default, set others here
    (setq denote-prompts '(title keywords))
    (setq denote-excluded-directories-regexp nil)
    (setq denote-excluded-keywords-regexp nil)

    ;; Pick dates, where relevant, with Org's advanced interface:
    (setq denote-date-prompt-use-org-read-date t)

    (setq denote-date-format nil) ; read doc string

    ;; By default, we do not show the context of links.  We just display
    ;; file names.  This provides a more informative view.
    (setq denote-backlinks-show-context t)
    (setq denote-dired-directories
          (list denote-directory))

    (add-hook 'dired-mode-hook #'denote-dired-mode-in-directories)
    (set-face-attribute 'denote-faces-link nil :foreground "#EBCB8B" :inherit 'link))
#+end_src

** Citar

[[https://github.com/emacs-citar/citar][citar]] provides a completing-read front-end to browse and act on BibTeX, BibLaTeX, and CSL JSON bibliographic data, and LaTeX, markdown, and org-cite editing support.

#+begin_src emacs-lisp
  ;; Citar configuration
  (use-package citar
    :no-require
    :custom
    (org-cite-global-bibliography (list (concat org-directory "/references/biblioteca_zotero.bib")))
    (org-cite-insert-processor 'citar)
    (org-cite-follow-processor 'citar)
    (org-cite-activate-processor 'citar)
    (citar-bibliography org-cite-global-bibliography)
    :config
    (defvar citar-indicator-notes-icons
      (citar-indicator-create
       :symbol (nerd-icons-mdicon
                "nf-md-notebook"
                :face 'nerd-icons-blue
                :v-adjust -0.3)
       :function #'citar-has-notes
       :padding "  "
       :tag "has:notes"))

    (defvar citar-indicator-links-icons
      (citar-indicator-create
       :symbol (nerd-icons-octicon
                "nf-oct-link"
                :face 'nerd-icons-orange
                :v-adjust -0.1)
       :function #'citar-has-links
       :padding "  "
       :tag "has:links"))

    (defvar citar-indicator-files-icons
      (citar-indicator-create
       :symbol (nerd-icons-faicon
                "nf-fa-file"
                :face 'nerd-icons-green
                :v-adjust -0.1)
       :function #'citar-has-files
       :padding "  "
       :tag "has:files"))

    (setq citar-indicators
          (list citar-indicator-files-icons
                citar-indicator-notes-icons
                citar-indicator-links-icons))
    (setq citar-symbol-separator "  ")
    :bind
    (:map org-mode-map :package org ("C-c i" . #'org-cite-insert)))

    ;; citar-denote package
    (use-package citar-denote
      :after (citar denote)
      :config
      (citar-denote-mode)
      (setq citar-open-always-create-notes t))
#+end_src

** Ox-latex

=ox-latex= is the Latex export framework included in =org-mode=. With =minted=, syntax is highlighted in code blocks, using a third-party application, [[https://pygments.org/][pygments]], to process the source code. 

#+begin_src emacs-lisp
  ;; Latex configuration
  (require 'ox-latex)
  (add-to-list 'org-latex-packages-alist '("" "minted"))

  (setq org-latex-listings 'minted
        org-latex-minted-options '(("breaklines" "true")
                                   ("breakanywhere" "true")
                                   ("frame" "lines")
                                   ("framesep" "2mm")
                                   ("linenos" "false")
                                   ("bgcolor" "shadecolor")))

  (setq org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

  (with-eval-after-load 'ox-latex
  (add-to-list 'org-latex-classes
               '("org-plain-latex"
                 "\\documentclass{article}
             [NO-DEFAULT-PACKAGES]
             [PACKAGES]
             [EXTRA]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))


#+end_src

** Visual fill column

[[https://codeberg.org/joostkremers/visual-fill-column][visual-fill-column]] is a small Emacs minor mode that mimics the effect of =fill-column= in =visual-line-mode= for a distraction-free writing mode.

#+begin_src emacs-lisp
  ;; Visual fill column configuration
  (use-package visual-fill-column
    :ensure t
    :hook
    (text-mode . visual-fill-column-mode)
    (org-mode . visual-fill-column-mode)
    (markdown-mode . visual-fill-column-mode)
    :custom
    (visual-fill-column-center-text t)
    (visual-fill-column-width 120))
#+end_src

** Org stikcy header

[[https://github.com/alphapapa/org-sticky-header][org-sticky-header]] shows a sticky bar at the top, showing the current org heading.

#+begin_src emacs-lisp
  ;;org-sticky-header configuration
  (use-package org-sticky-header
     :hook (org-mode . org-sticky-header-mode)
     :config
     ;; Show full path in header
     (setq org-sticky-header-full-path 'full)
     ;; Use > instead of / as separator
     (setq org-sticky-header-outline-path-separator " > "))
#+end_src

* Eshell
Configuration ideas taken from [[https://github.com/howardabrams/dot-files/blob/master/emacs-eshell.org][Howard Abrams]].

Scrolling through the output and searching for results that can be  copied to the kill ring is a great feature of Eshell. However,  instead of running =end-of-buffer= key-binding, the following  setting means any other key will jump back to the prompt:

  #+BEGIN_SRC emacs-lisp
    ;; Eshell configuration
    (use-package eshell
      :init
      (setq eshell-scroll-to-bottom-on-input 'all
            eshell-scroll-show-maximum-output nil
            eshell-error-if-no-glob t
            eshell-hist-ignoredups t
            eshell-save-history-on-exit t
            eshell-prefer-lisp-functions nil
            eshell-destroy-buffer-when-process-dies t)
      ;;Eshell would get somewhat confused if I ran the following commands
      (add-hook 'eshell-mode-hook
                (lambda ()
                  (add-to-list 'eshell-visual-commands "ssh")
                  (add-to-list 'eshell-visual-commands "tail")
                  (add-to-list 'eshell-visual-commands "top"))))
  #+END_SRC
  
** Special prompt

  Following [[http://blog.liangzan.net/blog/2012/12/12/customizing-your-emacs-eshell-prompt/][these instructions]], we build a better prompt with the Git branch in it (Of course, it matches my Bash prompt). First, we need a function that returns a string with the Git branch in it, e.g. ":master"

  #+BEGIN_SRC emacs-lisp
    (defun pmdn/curr-dir-git-branch-string (pwd)
      "Returns current git branch as a string, or the empty string if
    PWD is not in a git repo (or the git command is not found)."
      (interactive)
      (when (and (not (file-remote-p pwd))
                 (eshell-search-path "git")
                 (locate-dominating-file pwd ".git"))
        (let* ((git-url (shell-command-to-string "git config --get remote.origin.url"))
               (git-output (shell-command-to-string (concat "git rev-parse --abbrev-ref HEAD")))
               (git-branch (s-trim git-output))
               (git-icon  "\xe0a0"))
          (concat "[" git-branch "]"))))
  #+END_SRC

  The function takes the current directory passed in via =pwd= and replaces the =$HOME= part with a tilde. I'm sure this function already exists in the eshell source, but I didn't find it...

  #+BEGIN_SRC emacs-lisp
    (defun pmdn/pwd-replace-home (pwd)
      "Replace home in PWD with tilde (~) character."
      (interactive)
      (let* ((home (expand-file-name (getenv "HOME")))
             (home-len (length home)))
        (if (and
             (>= (length pwd) home-len)
             (equal home (substring pwd 0 home-len)))
            (concat "~" (substring pwd home-len))
          pwd)))
  #+END_SRC

  Make the directory name be shorter...by replacing all directory names with just its first names. However, we leave the last two to be the full names. Why yes, I did steal this.

  #+BEGIN_SRC emacs-lisp
    (defun pmdn/pwd-shorten-dirs (pwd)
      "Shorten all directory names in PWD except the last two."
      (let ((p-lst (split-string pwd "/")))
        (if (> (length p-lst) 2)
            (concat
             (mapconcat (lambda (elm) (if (zerop (length elm)) ""
                                   (substring elm 0 1)))
                        (butlast p-lst 2)
                        "/")
             "/"
             (mapconcat (lambda (elm) elm)
                        (last p-lst 2)
                        "/"))
          pwd)))  ;; Otherwise, we just return the PWD
  #+END_SRC

  Break up the directory into a "parent" and a "base":

  #+BEGIN_SRC emacs-lisp
    (defun pmdn/split-directory-prompt (directory)
      (if (string-match-p ".*/.*" directory)
          (list (file-name-directory directory) (file-name-base directory))
        (list "" directory)))
  #+END_SRC

  Using virtual environments for certain languages is helpful to know, especially since I change them based on the directory.

  #+BEGIN_SRC emacs-lisp
    (defun pmdn/python-prompt ()
      "Returns a string (may be empty) based on the current Python
       Virtual Environment. Assuming the M-x command: `pyvenv-activate'
       has been called."
      (when (not (eq pyvenv-virtual-env-name 'nil))
        (concat "(" pyvenv-virtual-env-name ")")))
  #+END_SRC

  Now tie it all together with a prompt function can color each of the prompts components.

  #+BEGIN_SRC emacs-lisp
    (defun eshell/eshell-local-prompt-function ()
      "A prompt for eshell that works locally (in that is assumes
    that it could run certain commands) in order to make a prettier,
    more-helpful local prompt."
      (interactive)
      (let* ((pwd        (eshell/pwd))
             (directory (pmdn/split-directory-prompt
                         (pmdn/pwd-shorten-dirs
                          (pmdn/pwd-replace-home pwd))))
             (parent (car directory))
             (name   (cadr directory))
             (branch (pmdn/curr-dir-git-branch-string pwd))
             (python (when (not (file-remote-p pwd)) (pmdn/python-prompt)))

             (dark-env (eq 'dark (frame-parameter nil 'background-mode)))
             (for-name  `(:weight bold :foreground "#81A1C1"))
             (for-bars                 `(:weight bold))
             (for-parent  (if dark-env `(:foreground "dark orange") `(:foreground "blue")))
             (for-dir     (if dark-env `(:foreground "orange" :weight bold)
                            `(:foreground "blue" :weight bold)))
             (for-git                  `(:foreground "LightSeaGreen"))
             (for-python               `(:foreground "DarkGrey")))

        (concat
         (propertize (user-login-name) 'face for-name)
         (propertize "@" 'face for-name)
         (propertize (system-name) 'face for-name)
         (propertize " : " 'face for-bars)
         (propertize parent   'face for-parent)
         (propertize name     'face for-dir)
         (when branch
           (concat (propertize " : "    'face for-bars)
                   (propertize branch   'face for-git)))
         (when python
           (concat (propertize " : " 'face for-bars)
                   (propertize python 'face for-python)))
         ;;(propertize "\n"     'face for-bars)
         (propertize (if (= (user-uid) 0) " #" " $") 'face `(:weight ultra-bold))
         ;; (propertize " └→" 'face (if (= (user-uid) 0) `(:weight ultra-bold :foreground "red") `(:weight ultra-bold)))
         (propertize " "    'face `(:weight bold)))))

    (setq-default eshell-prompt-function #'eshell/eshell-local-prompt-function)
  #+END_SRC

  Turn off the default prompt, otherwise, it won't use ours:

  #+BEGIN_SRC emacs-lisp
    (setq eshell-highlight-prompt nil)
  #+END_SRC

** Shell windows

Making little Shells whenever I need them:

   #+BEGIN_SRC emacs-lisp
     (defun pmdn/eshell-here ()
       "Opens up a new shell in the directory associated with the
         current buffer's file. The eshell is renamed to match that
         directory to make multiple eshell windows easier."
       (interactive)
       (let* ((height (/ (window-total-height) 4)))
         (split-window-vertically (- height))
         (other-window 1)
         (eshell "new")
         (insert (concat "ls"))
         (eshell-send-input)))

     (bind-key "C-!" 'pmdn/eshell-here)
   #+END_SRC

* Development

** Magit

[[https://magit.vc/][Magit]] is the best Git interface I've ever used.  Common Git operations are easy to execute quickly using Magit's command panel system.

#+BEGIN_SRC emacs-lisp

  ;; Magit for git
  (use-package magit
    :ensure t
    :bind (("C-x g" . magit-status)))

#+END_SRC

** Diff-hl

[[https://github.com/dgutov/diff-hl][diff-hl]] highlights uncommitted changes on the left side of the window (area also known as the "gutter"), allows you to jump between and revert them selectively.

#+begin_src emacs-lisp
  ;; diff-hl to show VC changes
  (use-package diff-hl
    :ensure t
    :config
    ;;(diff-hl-flydiff-mode)
    :hook
    ((after-init . global-diff-hl-mode)
     (dired-mode . diff-hl-dired-mode)
     (magit-pre-refresh . diff-hl-magit-pre-refresh)
     (magit-post-refresh . diff-hl-magit-post-refresh))
    :custom
    (diff-hl-draw-borders nil))
#+end_src

** Rainbow delimiter

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth.  This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+BEGIN_SRC emacs-lisp

  ;; Easier to see if parenthesis are well closed
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+END_SRC

** Htmlize

[[https://github.com/hniksic/emacs-htmlize][Htmlize]] converts the buffer text and the associated decorations to HTML

#+BEGIN_SRC emacs-lisp

  ;; Htmlize. To retain code coloring at html export
  (use-package htmlize
    :ensure t)
  
  ;; To retain the background color of the used theme
  (add-hook 'org-export-before-processing-hook 'pmdn/org-inline-css-hook)

#+END_SRC

** Eglot

Using [[https://github.com/joaotavora/eglot][eglot]], a language server protocol (LSP) for Emacs.
Make sure servers for the different languajes are installed:
On Linux
- python language: ~pip3 install "python-language-server[all]"~
- clangd: ~sudo apt -y install clangd-14~
On Windows
- python language server: ~pip install python-language-server[all]~
- clangd: install the [[https://github.com/llvm/llvm-project/releases/download/llvmorg-14.0.6/LLVM-14.0.6-win64.exe][executable]].

#+begin_src emacs-lisp

  ;; Eglot configuration
  (cond ((eq system-type 'windows-nt)
         ;; Windows-specific code goes here.
         (use-package eglot
           :ensure t
           :defer t
           :hook ((python-mode . eglot-ensure)
                  (c-mode . eglot-ensure)
                  (c++-mode . eglot-ensure))
           :custom
           (eglot-autoshutdown t)
           :config
           (add-to-list 'eglot-server-programs '((c++-mode c-mode) "clangd"))
            ;;Eglot will change the completion-category-defaults. And I can make it work by customizing completion-category-overrides
           (setq completion-category-overrides '((eglot (styles orderless)))))

         )
        ((eq system-type 'gnu/linux)
         ;; Linux-specific code goes here.
         (use-package eglot
           :ensure t
           :defer t
           :hook ((python-mode . eglot-ensure)
                  (c-mode . eglot-ensure)
                  (c++-mode . eglot-ensure))
           :custom
           (eglot-autoshutdown t)
           :config
           (add-to-list 'eglot-server-programs '((c++-mode c-mode) "clangd-14"))
                           ;;Eglot will change the completion-category-defaults. And I can make it work by customizing completion-category-overrides
           (setq completion-category-overrides '((eglot (styles orderless)))))

         ))

#+end_src

** TBD

https://github.com/renzmann/treesit-auto

https://github.com/svaante/dape

** Python

Make sure you install virtualenv by: ~sudo apt install virtualenv~
Or: ~python3 -m pip install virtualenv~
And; ~apt install python3.10-venv~
Also install pip: ~sudo apt install python3-pip~

I initially used elpy as described in this tutorial https://realpython.com/emacs-the-best-python-editor/.

On 2022/08/04 I changed to [[https://github.com/joaotavora/eglot][eglot]]. Configuration examples used:
- https://gist.github.com/Nathan-Furnal/b327f14e861f009c014af36c1790ec49
- https://www.reddit.com/r/emacs/comments/ushfzn/comment/ii0pbg7/?utm_source=share&utm_medium=web2x&context=3
- https://cestlaz.github.io/post/using-emacs-74-eglot/


Update 2024/06/17:
You can have a global LSP (not recommended, or at least, not recommended having only that) or install an LSP for each virtual environment. For small projects (personal use) the most appropriate thing is to generate a virtual environment called =venv_emacs= and install in it the most used packages in addition to the LSP. =Pyright= has been used in the past, but it is closed source and maintained by Microsoft. =Python LSP Server= (=pylsp=) is now used, which is open source and uses =Jedi= as a backend.

Only the first time:
~M-x pyvenv-create venv_emacs~
~M-x pyvenv-workon venve_emacs~
~pip install pandas numpy matplotlib~

To use all the default providers: ~pip install "python-lsp-server[all]"~ 
For linting and formatting with =ruff= (a lot faster), also install: ~pip install ruff python-lsp-ruff~
This disables the linting and formatting providers by default.

Then, when developing, as explainde later:
~M-x pyvenv-workon venv_emacs~
~M-x eglot~

Set org-babel to python 3.

#+BEGIN_SRC  emacs-lisp

  (cond ((eq system-type 'windows-nt)
       ;; Windows-specific code goes here.
       )
      ((eq system-type 'gnu/linux)
       ;; Linux-specific code goes here.
       (setq org-babel-python-command "python3")
       ))

#+END_SRC

Use the built in python.el package.

#+begin_src emacs-lisp

  ;; Python mode configuration
  (use-package python
    :mode ("\\.py\\'" . python-mode)
          ("\\.wsgi$" . python-mode)
    :interpreter ("python" . python-mode)
    :config
    (setq python-indent-offset 4))

#+end_src

Add =~/.local/bin= to load path. That’s where ~virtualenv~ is installed, and we’ll need that for ~jedi~. Check with ~which virtualenv~ on the shell.

#+BEGIN_SRC  emacs-lisp

  (pmdn/append-to-path "~/.local/bin")

#+END_SRC

[[https://github.com/jorgenschaefer/pyvenv][pyvenv]] for virtual environments. Use ~M-x pyvenv-workon~ to select a virtual env and then ~M-x eglot~.

Eshell must be opened after creating the environment in order to use it.

If created in the default directory by ~M-x pyvenv-create~ instead of doing it from the shell by ~python3 -m venv path/to/venv~, don't use the name =venv=, otherwise is not correctly shown in the =modeline=. Better use somethin like =venv_projX=.

The default path for  ~M-x pyvenv-create~ is =~/.virtualenvs=.

#+begin_src emacs-lisp

  ;; Pyvenv configuration
  (use-package pyvenv
    :ensure t
    :config
    (pyvenv-mode 1))

#+end_src

** Common Lisp

First install the [[https://www.sbcl.org/index.html][SBCL]] compiler with ~sudo apt install sbcl~.

Then the [[https://www.quicklisp.org/beta/][Quicklisp]] packgage manager following the instructions on the web.

[[https://github.com/joaotavora/sly][Sly]] is a Common Lisp IDE for Emacs with a full-featured REPL. The REPL is lauched by ~M-x sly~. This must be done before evaluating =lisp= code block in =org-babel=.

#+begin_src emacs-lisp
  ;; Sly configuration
  (use-package sly
    :ensure t
    :defer t
    :mode "\\.lisp\\'"
    :config
    (setq inferior-lisp-program "sbcl"))

#+end_src

** Scheme

First install [[https://www.gnu.org/software/guile/][Guile]] with ~sudo apt install guile-3.0~.

[[https://github.com/emacsmirror/geiser][Geiser]] is a generic Emacs/Scheme interaction mode, featuring an enhanced REPL and a set of minor modes improving Emacs’ basic scheme major mode. It supports different schemes via independente packages.

For Guile, [[https://gitlab.com/emacs-geiser/guile][geise-guile]] will be installed, which installs Geiser, as it depends on it. To launch the REPL, run ~M-x geiser-guile~.

#+begin_src emacs-lisp
  ;; Geiser-Guile configuration
  (use-package geiser-guile
    :ensure t
    :config
    (setq geiser-default-implementation 'guile)
    (setq geiser-active-implementations '(guile)))
#+end_src

** Markdown

[[https://github.com/jrblevin/markdown-mode][markdown-mode]] is a major mode for editing Markdown-formatted text.

#+begin_src emacs-lisp
  ;; markdown-mode configuration
  (use-package markdown-mode
    :ensure t
    :mode ("\\.md\\'" . markdown-mode))
#+end_src

** CSV

[[https://elpa.gnu.org/packages/csv-mode.html][csv-mode]] is a major mode for editing comma/char separated values.

#+begin_src emacs-lisp
  ;; csv-mode configuration
  (use-package csv-mode
    :defer t
    :mode ("\\.csv\\'" . csv-mode)
    :hook ((csv-mode . csv-align-mode)
           (csv-mode . csv-header-line)))
#+end_src

** JSON

[[https://github.com/json-emacs/json-mode][json-mode]] is a major mode for editing JSON files. Extends the builtin js-mode to add better syntax highlighting for JSON and some nice editing keybindings.

#+begin_src emacs-lisp
  ;; json-mode configuration
  (use-package json-mode
     :defer t
     :mode ("\\.json\\'" . json-mode))
#+end_src

** YAML

[[https://github.com/yoshiki/yaml-mode][yaml-mode]] is a simple major mode to edit YAML files for emacs.

#+begin_src emacs-lisp
  ;; yaml-mode configuration
  (use-package yaml-mode
     :defer t
     :mode (("\\.ya?ml\\'" . yaml-mode)))
#+end_src

** Yasnippet

[[https://github.com/joaotavora/YASnippet][yasnippet]] is a template system for Emacs. It allows you to type an abbreviation and automatically expand it into function templates. Bundled language templates include: C, C++, C#, Perl, Python, Ruby, SQL, LaTeX, HTML, CSS and more.

#+begin_src emacs-lisp
  ;; yasnippet configuration
  (use-package yasnippet
    :ensure t
    :demand t
    :defer 5
    :config (yas-global-mode))
#+end_src

[[https://github.com/AndreaCrotti/yasnippet-snippets][yasnippet-snippets]] contains the official collection of snippets for yasnippet.

#+begin_src emacs-lisp
  ;; yasnippet-snippets configuration
(use-package yasnippet-snippets
  :ensure t
  :after yasnippet
  :config (yasnippet-snippets-initialize))
#+end_src

* RSS with Elfeed

 [[https://github.com/skeeto/elfeed][Elfeed]] is a RSS reader integrated in Emacs. Together with [[https://github.com/remyhonig/elfeed-org][Elfeed-org]] makes adding feeds and reading them a joy.

#+BEGIN_SRC emacs-lisp

  ;; Configure Elfeed
  (use-package elfeed
    :ensure t
    :defer t
    :config
    (setq elfeed-db-directory (expand-file-name "elfeed" user-emacs-directory)
          elfeed-show-entry-switch 'display-buffer)
    (setq elfeed-search-filter "@1-months-ago +unread")
    :bind
    ("C-x w" . elfeed ))

  ;; Configure Elfeed with org mode
  (use-package elfeed-org
    :defer nil
    :after elfeed
    :init
    (elfeed-org)
    :config
    (setq rmh-elfeed-org-files (list  (concat org-directory "/elfeed.org"))))
#+END_SRC

* Pdf files with docview

Pdf files can be read with the built-in ~DocView~, but an external software is needed for rendering. [[https://mupdf.com/][MuPDF]] is an open source pdf reader that renders pdf files intro images and passes them to ~DocView~.

With Emacs 29.1 and above, =MuPDF= (installed via ~apt~) will convet pdf files into SVG instead of PNG, getting a sharper image and improving zooming capabilities.

#+begin_src emacs-lisp
  ;; Doc-View configuration for pdf files
  (use-package doc-view
    :custom
    (doc-view-resolution 300)
    (doc-view-mupdf-use-svg t)
    (large-file-warning-threshold (* 50 (expt 2 20))))
#+end_src

* HTML embed images

This code redefines how images are handled in HTML export to embed them in the code. Code is not tangled: Run this code before HTML export if wanting to make single file without needing external images. From [[https://www.reddit.com/r/orgmode/comments/7dyywu/creating_a_selfcontained_html/dq6dhv3][this Reddit comment]].

#+BEGIN_SRC emacs-lisp :tangle no
  (defun replace-in-string (what with in)
    (replace-regexp-in-string (regexp-quote what) with in nil 'literal))

  (defun org-html--format-image (source attributes info)
    (progn
      (setq source (replace-in-string "%20" " " source))
      (format "<img src=\"data:image/%s;base64,%s\"%s />"
              (or (file-name-extension source) "")
              (base64-encode-string
               (with-temp-buffer
                 (insert-file-contents-literally source)
                (buffer-string)))
              (file-name-nondirectory source))))
#+END_SRC

* AI with gptel

[[https://github.com/karthink/gptel][gptel]] is a simple Large Language Model chat client for Emacs, with support for multiple models and backends. It works in the spirit of Emacs, available at any time and uniformly in any buffer.

#+begin_src emacs-lisp
  ;; Configure gptel
  (use-package gptel
    :config
    (setq gptel-default-mode 'org-mode)
    ;; default backend
    (setq
     gptel-model 'llama3.2
     gptel-backend (gptel-make-ollama "Ollama"
                     :host "localhost:11434"
                     :stream t
                     :models '(llama3.2))))
#+end_src
* Finish line

#+begin_src emacs-lisp

  ;; Local Variables:
  ;; byte-compile-warnings: (not free-vars noruntime)
  ;; End:
  
  ;;; init.el ends here

#+end_src
